<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rust.Love</title>
  <subtitle>Here is the Earth?</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rust.love/"/>
  <updated>2018-02-04T14:46:45.950Z</updated>
  <id>http://rust.love/</id>
  
  <author>
    <name>OutMan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于 Redis 的延时队列设计与实现（一周学习报-第1期）</title>
    <link href="http://rust.love/2018/02/04/study_weekly_01/"/>
    <id>http://rust.love/2018/02/04/study_weekly_01/</id>
    <published>2018-02-04T14:12:06.685Z</published>
    <updated>2018-02-04T14:46:45.950Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本期目标">本期目标</h3><ul>
<li>了解延时队列的工作原理</li>
<li>自己可以通过现有的工具软件来实现延时队列服务</li>
</ul>
<h3 id="延时队列应用场景">延时队列应用场景</h3><p>延时队列有很多应用场景，简单来说需要在未来某个特定时间去执行的任务，都可以采用延时队列。例如：</p>
<ul>
<li>下订单后 30 分钟未支付的释放订单。</li>
<li>用户完成某个功能后，N 天推送个消息。</li>
<li>当前我们的使用场景就属于用户被商家处理后，需要 2 天后给用户反馈消息。</li>
<li>……</li>
</ul>
<p>上面提到的这些场景如果不用延时队列都是可以处理的，例如轮训 DB 等，如果采用了延时队列会有更好的效果，除了以上的应用场景，还有很多，可以自己探索。</p>
<h3 id="为什么要基于_Redis_去设计一个延时队列">为什么要基于 Redis 去设计一个延时队列</h3><p>已经很有一些不错的延时队列产品。例如 BeansTalk，但是我们这里只为教学目的，所以自己设计一套，基于 PHP 和 Redis 的代码简单，通过自己设计这个过程，可以增强一些概念和了解原理。</p>
<h3 id="使用_RabbitMQ_死信方式存在的问题">使用 RabbitMQ 死信方式存在的问题</h3><ul>
<li>同一个队列内，数据延时时间不固定，会有阻塞问题。</li>
</ul>
<h3 id="涉及的名词解释">涉及的名词解释</h3><ul>
<li>Queue 就是正常的队列</li>
<li>enqueue 入队</li>
<li>dequeue 出对</li>
<li>Buckt 延时队列数据的存储器</li>
<li>Scanner 扫描 Bucket，寻找符合条件的数据</li>
</ul>
<h3 id="Buckt_设计思路">Buckt 设计思路</h3><ul>
<li>为每条消息生成唯一标识，ZSET 存储数据的延时排序 { value: uuid, score: delay_seconds}</li>
<li>Hash 存储具体对应的数据 { key : uuid, value : data}</li>
</ul>
<p>扫描 Bucket 的 ZSET 内的数据，如果 delay_seconds 满足条件，根据 uuid 取出  Hash 内数据，发送到正常队列，删除 ZSET 和 Hash 内的元素。</p>
<p>为了提高效率，降低延时，对整个服务默认分了 4 个 Bucket，每个 Bucket 对应一个进程去扫描处理。文档如下图：</p>
<p><img src="/images/study_weekly_01_01.jpeg" alt="数据流程和文档 01"><br><img src="/images/study_weekly_01_01.jpeg" alt="数据流程和文档 02"></p>
<p>源码地址： <a href="https://github.com/outman/dq" target="_blank" rel="noopener">http://github.com/outman</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本期目标&quot;&gt;本期目标&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;了解延时队列的工作原理&lt;/li&gt;
&lt;li&gt;自己可以通过现有的工具软件来实现延时队列服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;延时队列应用场景&quot;&gt;延时队列应用场景&lt;/h3&gt;&lt;p&gt;延时队列有很多应用场景，简单来说需要在
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>reqargs lua tcp socket read timed out</title>
    <link href="http://rust.love/2017/10/30/lua_tcp_socket_read_timed_out_reqargs/"/>
    <id>http://rust.love/2017/10/30/lua_tcp_socket_read_timed_out_reqargs/</id>
    <published>2017-10-30T15:57:58.847Z</published>
    <updated>2017-10-30T15:57:58.847Z</updated>
    
    <content type="html"><![CDATA[<p>上传文件，因为还有其它 form 参数，所以使用了 reqargs<br>模块，发现在错误日志里出现了<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span>/<span class="number">10</span>/<span class="number">30</span> <span class="number">22</span>:<span class="number">29</span>:<span class="number">42</span> [<span class="built_in">error</span>] <span class="number">15189</span>#<span class="number">0</span>: *<span class="number">641</span> lua tcp socket <span class="built_in">read</span> timed out</span><br></pre></td></tr></table></figure></p>
<p>导致这个问题原因有很多，可以搜索下 nginx 相关的一些设置，在调整了 nginx<br>一些相关的 timeout 参数无果后，去翻了一下 reqargs<br>的代码，原来是在读取上传文件的时候超时了，而 reqargs 是有 timeout<br>设置的，只是我没有在文档里看到，详细代码如下：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span> <span class="built_in">sub</span>(ct, <span class="number">1</span>, <span class="number">19</span>) == <span class="string">"multipart/form-data"</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> tmpdr = options.tmp_dir <span class="keyword">or</span> defaults.tmp_dir</span><br><span class="line">    <span class="keyword">if</span> tmpdr <span class="keyword">and</span> <span class="built_in">sub</span>(tmpdr, <span class="number">-1</span>) ~= sep <span class="keyword">then</span></span><br><span class="line">        tmpdr = tmpdr .. sep</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> maxfz = options.max_file_size    <span class="keyword">or</span> defaults.max_file_size</span><br><span class="line">    <span class="keyword">local</span> maxfs = options.max_file_uploads <span class="keyword">or</span> defaults.max_file_uploads</span><br><span class="line">    <span class="keyword">local</span> chunk = options.chunk_size       <span class="keyword">or</span> defaults.chunk_size</span><br><span class="line">    <span class="keyword">local</span> form, e = upload:new(chunk, options.max_line_size <span class="keyword">or</span> defaults.max_line_size)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> form <span class="keyword">then</span> <span class="keyword">return</span> <span class="literal">nil</span>, e <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> h, p, f, o, s</span><br><span class="line">    <span class="keyword">local</span> u = <span class="number">0</span></span><br><span class="line">    form:set_timeout(options.timeout <span class="keyword">or</span> defaults.timeout)</span><br></pre></td></tr></table></figure>
<p>这个 timeoutm 如果不设置，默认就是 1000，主要是在模块初始化的时候设置</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> get, post, files = <span class="built_in">require</span> <span class="string">"reqargs"</span>(&#123;timeout = <span class="number">3600</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>改为 3600 后，问题消失。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上传文件，因为还有其它 form 参数，所以使用了 reqargs&lt;br&gt;模块，发现在错误日志里出现了&lt;br&gt;&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Laravel 中 Event 的执行流程</title>
    <link href="http://rust.love/2017/09/21/laravel_event/"/>
    <id>http://rust.love/2017/09/21/laravel_event/</id>
    <published>2017-09-21T09:37:13.000Z</published>
    <updated>2017-09-21T12:05:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Laravel 中已经有关于 Event 的说明和介绍了，文档中主要讲述了怎么使用和 Event 的示例场景和功能，下面主要说下整个 Event 的执行过程。</p>
<h3 id="Application">Application</h3><p>从程序的入口 public/index.php，项目加载了 bootstrap/app.php 文件，该文件主要是返回一个 Application 对象 $app，在 Application 这个类里有下面的这个方法，主要是注册 Providers 的，稍后我们会讲解这个方法的调用点。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerConfiguredProviders</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $providers = Collection::make(<span class="keyword">$this</span>-&gt;config[<span class="string">'app.providers'</span>])</span><br><span class="line">                    -&gt;partition(<span class="function"><span class="keyword">function</span> <span class="params">($provider)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> Str::startsWith($provider, <span class="string">'Illuminate\\'</span>); <span class="comment">// 这里将自定义的和系统的区分开，形成 [Ill..., App...]</span></span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">    $providers-&gt;splice(<span class="number">1</span>, <span class="number">0</span>, [<span class="keyword">$this</span>-&gt;make(PackageManifest::class)-&gt;providers()]);</span><br><span class="line"></span><br><span class="line">    (<span class="keyword">new</span> ProviderRepository(<span class="keyword">$this</span>, <span class="keyword">new</span> Filesystem, <span class="keyword">$this</span>-&gt;getCachedServicesPath()))</span><br><span class="line">                -&gt;load($providers-&gt;collapse()-&gt;toArray());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加载完 bootstrap/app.php 文件以后，看 public/index.php 下面这段代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line"></span><br><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>在 $app-&gt;make 创建 Kernel 对象的时候， Application 被默认注入了，所以 $kernel-&gt;app 就是 Application 类的实例。$kernel-&gt;handle() 主要调用了下面几个方法，</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$kernel-&gt;sendRequestThroughRouter();</span><br><span class="line">    $kernel-&gt;bootstrap();</span><br><span class="line">        $kernel-&gt;app-&gt;bootstrapWith();</span><br></pre></td></tr></table></figure>
<p>其中 $app-&gt;bootstrapWith 方法主要是去循环处理 $kernel-&gt;bootstrappers 这个数组，实例化每个类，并且调用该类的 bootstrap($app) 方法</p>
<figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected $bootstrappers = [</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\LoadEnvironmentVariables::<span class="class"><span class="keyword">class</span>,</span></span><br><span class="line">    \Illuminate\Foundation\Bootstrap\LoadConfiguration::<span class="class"><span class="keyword">class</span>,</span></span><br><span class="line">    \Illuminate\Foundation\Bootstrap\HandleExceptions::<span class="class"><span class="keyword">class</span>,</span></span><br><span class="line">    \Illuminate\Foundation\Bootstrap\RegisterFacades::<span class="class"><span class="keyword">class</span>,</span></span><br><span class="line">    \Illuminate\Foundation\Bootstrap\RegisterProviders::<span class="class"><span class="keyword">class</span>,</span></span><br><span class="line">    \Illuminate\Foundation\Bootstrap\BootProviders::<span class="class"><span class="keyword">class</span>,</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>这里面我们需要关注的就是 \Illuminate\Foundation\Bootstrap\RegisterProviders::class 这个类，下面看下这个类的具体代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterProviders</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bootstrap the given application.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Contracts\Foundation\Application  $app</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 这个方法就是上面第一个地方介绍的方法。</span></span><br><span class="line">        $app-&gt;registerConfiguredProviders();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ProviderRepository">ProviderRepository</h3><p>上面的代码主要讲了从入口到 ProviderRepository 的过程，下面主要讲 ProviderRepository 之后的过程，在 ProviderRepository 类里有个比较重要的方法 load，代码如下</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">(array $providers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $manifest = <span class="keyword">$this</span>-&gt;loadManifest();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// First we will load the service manifest, which contains information on all</span></span><br><span class="line">    <span class="comment">// service providers registered with the application and which services it</span></span><br><span class="line">    <span class="comment">// provides. This is used to know which services are "deferred" loaders.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;shouldRecompile($manifest, $providers)) &#123;</span><br><span class="line">        $manifest = <span class="keyword">$this</span>-&gt;compileManifest($providers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Next, we will register events to load the providers for each of the events</span></span><br><span class="line">    <span class="comment">// that it has requested. This allows the service provider to defer itself</span></span><br><span class="line">    <span class="comment">// while still getting automatically loaded when a certain event occurs.</span></span><br><span class="line">    <span class="keyword">foreach</span> ($manifest[<span class="string">'when'</span>] <span class="keyword">as</span> $provider =&gt; $events) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;registerLoadEvents($provider, $events);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We will go ahead and register all of the eagerly loaded providers with the</span></span><br><span class="line">    <span class="comment">// application so their services can be registered with the application as</span></span><br><span class="line">    <span class="comment">// a provided service. Then we will set the deferred service list on it.</span></span><br><span class="line">    <span class="keyword">foreach</span> ($manifest[<span class="string">'eager'</span>] <span class="keyword">as</span> $provider) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;register($provider);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;addDeferredServices($manifest[<span class="string">'deferred'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意上面的 load 方法， Providers 会被分为几类，defer when eager，具体看 Provider 的类型来区分的，我们的 App\Providers\EventServiceProvider 就属于 eager。这里 $this-&gt;app-&gt;register() 调用，注册 Provider，且调用了该 Provider 的 register 方法，代码如下</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">($provider, $options = [], $force = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (($registered = <span class="keyword">$this</span>-&gt;getProvider($provider)) &amp;&amp; ! $force) &#123;</span><br><span class="line">        <span class="keyword">return</span> $registered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the given "provider" is a string, we will resolve it, passing in the</span></span><br><span class="line">    <span class="comment">// application instance automatically for the developer. This is simply</span></span><br><span class="line">    <span class="comment">// a more convenient way of specifying your service provider classes.</span></span><br><span class="line">    <span class="keyword">if</span> (is_string($provider)) &#123;</span><br><span class="line">        $provider = <span class="keyword">$this</span>-&gt;resolveProvider($provider);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method_exists($provider, <span class="string">'register'</span>)) &#123;</span><br><span class="line">        $provider-&gt;register(); <span class="comment">// 注意这里</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;markAsRegistered($provider);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the application has already booted, we will call this boot method on</span></span><br><span class="line">    <span class="comment">// the provider class so it has an opportunity to do its boot logic and</span></span><br><span class="line">    <span class="comment">// will be ready for any usage by this developer's application logic.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;booted) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;bootProvider($provider); <span class="comment">// 注意这里</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $provider;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用完 register 方法之后，在 register 这个方法之后调用了 $bootProvider，这个方法调用了 Provider 的 boot 方法。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">bootProvider</span><span class="params">(ServiceProvider $provider)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (method_exists($provider, <span class="string">'boot'</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;call([$provider, <span class="string">'boot'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="EventServiceProvider">EventServiceProvider</h3><p>在 EventServiceProvider 类中，boot 这个方法非常重要，他完成了 Event 和 Listener 的初始化工作，代码如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;listens() <span class="keyword">as</span> $event =&gt; $listeners) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($listeners <span class="keyword">as</span> $listener) &#123;</span><br><span class="line">            Event::listen($event, $listener);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;subscribe <span class="keyword">as</span> $subscriber) &#123;</span><br><span class="line">        Event::subscribe($subscriber);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是 Dispatcher 的 listen 方法：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">listen</span><span class="params">($events, $listener)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ((<span class="keyword">array</span>) $events <span class="keyword">as</span> $event) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Str::contains($event, <span class="string">'*'</span>)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;setupWildcardListen($event, $listener); <span class="comment">// 这里，最后调用了 makeListener 方法</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;listeners[$event][] = <span class="keyword">$this</span>-&gt;makeListener($listener); <span class="comment">// 这个方法对 listener 进行了初始化</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码对 Listener 做了初始化工作，这样可以在接下来的调用中使用，并且初始化之后是一个 callable 类型，之后整个事件初始化工作基本完成，接下来就是使用事件。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createClassListener</span><span class="params">($listener, $wildcard = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 注意这个返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($event, $payload)</span> <span class="title">use</span> <span class="params">($listener, $wildcard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($wildcard) &#123;</span><br><span class="line">            <span class="keyword">return</span> call_user_func(<span class="keyword">$this</span>-&gt;createClassCallable($listener), $event, $payload);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> call_user_func_array(</span><br><span class="line">                <span class="keyword">$this</span>-&gt;createClassCallable($listener), $payload</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">createClassCallable</span><span class="params">($listener)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">list</span>($class, $method) = <span class="keyword">$this</span>-&gt;parseClassCallable($listener);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;handlerShouldBeQueued($class)) &#123; <span class="comment">// 这里决定是否使用异步队列来接受事件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;createQueuedHandlerCallable($class, $method);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">$this</span>-&gt;container-&gt;make($class), $method];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseClassCallable</span><span class="params">($listener)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Str::parseCallback($listener, <span class="string">'handle'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Event::fire">Event::fire</h3><p>Event 系统初始化之后，我们是需要使用事件的，下面就讲下事件的触发，事件的触发主要是 Event::fire 和 event 其实他们并没有什么大区别，底层都是相同的代码。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">($event, $payload = [], $halt = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// When the given "event" is actually an object we will assume it is an event</span></span><br><span class="line">    <span class="comment">// object and use the class as the event name and this event itself as the</span></span><br><span class="line">    <span class="comment">// payload to the handler, which makes object based events quite simple.</span></span><br><span class="line">    <span class="keyword">list</span>($event, $payload) = <span class="keyword">$this</span>-&gt;parseEventAndPayload(</span><br><span class="line">        $event, $payload</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;shouldBroadcast($payload)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;broadcastEvent($payload[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $responses = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;getListeners($event) <span class="keyword">as</span> $listener) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意下面这行代码，就是上面所说的 Listener 初始化为一个 callable，这样 $listener($event, $payload) 才可以调用。</span></span><br><span class="line">        $response = $listener($event, $payload);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If a response is returned from the listener and event halting is enabled</span></span><br><span class="line">        <span class="comment">// we will just return this response, and not call the rest of the event</span></span><br><span class="line">        <span class="comment">// listeners. Otherwise we will add the response on the response list.</span></span><br><span class="line">        <span class="keyword">if</span> ($halt &amp;&amp; ! is_null($response)) &#123;</span><br><span class="line">            <span class="keyword">return</span> $response;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If a boolean false is returned from a listener, we will stop propagating</span></span><br><span class="line">        <span class="comment">// the event to any further listeners down in the chain, else we keep on</span></span><br><span class="line">        <span class="comment">// looping through the listeners and firing every one in our sequence.</span></span><br><span class="line">        <span class="keyword">if</span> ($response === <span class="keyword">false</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $responses[] = $response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $halt ? <span class="keyword">null</span> : $responses;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上就是整个事件的主要执行过程，并没有涉及 Broadcast 和 Subscribe，相关代码基本已经穿插其中，异步事件保存到队列，是由 Listener 决定的，如果保存到队列，那么需要通过消耗队列来触发事件，文档有手动触发和自动触发相关的内容。<br>下面是一个示例存储在队列里的数据结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;displayName&quot;:&quot;App\\Listeners\\EventListener&quot;, </span><br><span class="line">    &quot;job&quot;:&quot;Illuminate\\Queue\\CallQueuedHandler@call&quot;, </span><br><span class="line">    &quot;maxTries&quot;:null, </span><br><span class="line">    &quot;timeout&quot;:null, </span><br><span class="line">    &quot;timeoutAt&quot;:null, </span><br><span class="line">    &quot;data&quot;:&#123;</span><br><span class="line">        &quot;commandName&quot;:&quot;Illuminate\\Events\\CallQueuedListener&quot;,</span><br><span class="line">        &quot;command&quot;:&quot;O:36:\\&quot;Illuminate\\Events\\CallQueuedListener\\&quot;:7:&#123;s:5:\\&quot;class\\&quot;;s:27:\\&quot;App\\Listeners\\EventListener\\&quot;;s:6:\\&quot;method\\&quot;;s:6:\\&quot;handle\\&quot;;s:4:\\&quot;data\\&quot;;a:1:&#123;i:0;O:16:\\&quot;App\\Events\\Event\\&quot;:2:&#123;s:5:\\&quot;input\\&quot;;a:2:&#123;s:1:\\&quot;a\\&quot;;i:1;s:1:\\&quot;b\\&quot;;i:2;&#125;s:6:\\&quot;socket\\&quot;;N;&#125;&#125;s:5:\\&quot;tries\\&quot;;N;s:9:\\&quot;timeoutAt\\&quot;;N;s:7:\\&quot;timeout\\&quot;;N;s:6:\\&quot;\\u0000*\\u0000job\\&quot;;N;&#125;&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;id&quot;:&quot;HI2SZiCD3K4Mmgu46RpLz13k4WhkWQAj&quot;,</span><br><span class="line">    &quot;attempts&quot;:0</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure>
<p>关于消耗队列里的内容就不写了。</p>
<p>END.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Laravel 中已经有关于 Event 的说明和介绍了，文档中主要讲述了怎么使用和 Event 的示例场景和功能，下面主要说下整个 Event 的执行过程。&lt;/p&gt;
&lt;h3 id=&quot;Application&quot;&gt;Application&lt;/h3&gt;&lt;p&gt;从程序的入口 public
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>luminus web 配置 c3p0 数据库链接池</title>
    <link href="http://rust.love/2017/09/11/luminusweb_with_c3p0/"/>
    <id>http://rust.love/2017/09/11/luminusweb_with_c3p0/</id>
    <published>2017-09-11T10:27:24.000Z</published>
    <updated>2017-09-11T10:33:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>luminus 的 db 操作工具不太好用，所以换成了 funcool 的 jdbc 和 c3p0。</p>
<h3 id="增加依赖">增加依赖</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[funcool/clojure.jdbc <span class="string">"0.9.0"</span>]</span><br><span class="line">[mysql/mysql-connector-java <span class="string">"5.1.6"</span>]</span><br><span class="line">[com.mchange/c3p0 <span class="string">"0.9.5"</span>]</span><br></pre></td></tr></table></figure>
<h3 id="配置_dbpool">配置 dbpool</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">def</span></span> dbpool (<span class="name"><span class="builtin-name">doto</span></span> (<span class="name">ComboPooledDataSource.</span>)</span><br><span class="line">              (<span class="name">.setJdbcUrl</span> (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"jdbc:"</span></span><br><span class="line">                                (<span class="symbol">:subprotocol</span> dbspec)</span><br><span class="line">                                <span class="string">":"</span></span><br><span class="line">                                (<span class="symbol">:subname</span> dbspec)))</span><br><span class="line">              (<span class="name">.setUser</span> (<span class="symbol">:dbuser</span> dbspec <span class="literal">nil</span>))</span><br><span class="line">              (<span class="name">.setPassword</span> (<span class="symbol">:dbpasswd</span> dbspec <span class="literal">nil</span>))</span><br><span class="line"></span><br><span class="line">              (<span class="name">.setMinPoolSize</span> <span class="number">10</span>)</span><br><span class="line">              (<span class="name">.setMaxPoolSize</span> <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">              (<span class="name">.setMaxConnectionAge</span>  <span class="number">3600</span>) <span class="comment">; 1 hour</span></span><br><span class="line">              (<span class="name">.setMaxIdleTime</span> <span class="number">1800</span>)       <span class="comment">; 1/2 hour</span></span><br><span class="line">              (<span class="name">.setMaxIdleTimeExcessConnections</span> <span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">              (<span class="name">.setTestConnectionOnCheckin</span> <span class="literal">false</span>)</span><br><span class="line">              (<span class="name">.setTestConnectionOnCheckout</span> <span class="literal">false</span>)</span><br><span class="line">              (<span class="name">.setIdleConnectionTestPeriod</span> <span class="number">600</span>)))</span><br></pre></td></tr></table></figure>
<h3 id="使用">使用</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> topic-fetch-all</span><br><span class="line">  []</span><br><span class="line">  (<span class="name"><span class="builtin-name">with-open</span></span> [conn (<span class="name">jdbc/connection</span> dbpool)]</span><br><span class="line">    (<span class="name"><span class="builtin-name">let</span></span> [result (<span class="name">jdbc/fetch</span> conn <span class="string">"select @@version"</span>)]</span><br><span class="line">	  (<span class="name"><span class="builtin-name">first</span></span> result))))</span><br></pre></td></tr></table></figure>
<p>END.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;luminus 的 db 操作工具不太好用，所以换成了 funcool 的 jdbc 和 c3p0。&lt;/p&gt;
&lt;h3 id=&quot;增加依赖&quot;&gt;增加依赖&lt;/h3&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RabbitMQ 队列积压</title>
    <link href="http://rust.love/2017/07/11/rabbitmq_some_tips/"/>
    <id>http://rust.love/2017/07/11/rabbitmq_some_tips/</id>
    <published>2017-07-11T10:21:29.000Z</published>
    <updated>2017-09-05T04:10:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/images/Rabbitmq.pdf">RabbitMQ 一次队列积压</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/images/Rabbitmq.pdf&quot;&gt;RabbitMQ 一次队列积压&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP设计模式-装饰模式实现非侵入式缓存</title>
    <link href="http://rust.love/2016/01/29/php_decorator_pattern_non_intrusive_cache/"/>
    <id>http://rust.love/2016/01/29/php_decorator_pattern_non_intrusive_cache/</id>
    <published>2016-01-29T02:17:50.000Z</published>
    <updated>2016-01-29T05:14:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本文的目标">本文的目标</h2><ul>
<li>简单几步，轻松实现非侵入式缓存。</li>
</ul>
<h2 id="本文的涉及名词">本文的涉及名词</h2><ul>
<li>装饰模式 (也叫修饰模式，只是翻译不同)</li>
<li>非侵入式</li>
<li>依赖注入</li>
</ul>
<h2 id="名词解释">名词解释</h2><h3 id="装饰模式">装饰模式</h3><pre><code>装饰模式，是面向对象编程领域中，一种动态地往一个类中添加新的行为的设计模式。就功能而言，修饰模式相比生成子类更为灵活，这样可以给某个对象而不是整个类添加一些功能。[修饰模式](https:<span class="regexp">//zh</span>.wikipedia.org/wiki/<span class="variable">%E4</span><span class="variable">%BF</span><span class="variable">%AE</span><span class="variable">%E9</span><span class="variable">%A5</span><span class="variable">%B0</span><span class="variable">%E6</span><span class="variable">%A8</span><span class="variable">%A1</span><span class="variable">%E5</span><span class="variable">%BC</span><span class="variable">%8F</span>)
</code></pre><h3 id="非侵入式">非侵入式</h3><pre><code>简单的说就是新加功能或者代码改原有代码
</code></pre><h3 id="依赖注入">依赖注入</h3><pre><code>控制反转（Inversion <span class="keyword">of</span> Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。[控制反转](https://zh.wikipedia.org/wiki/<span class="decorator">%E6</span><span class="decorator">%8E</span><span class="decorator">%A7</span><span class="decorator">%E5</span><span class="decorator">%88</span><span class="decorator">%B6</span><span class="decorator">%E5</span><span class="decorator">%8F</span><span class="decorator">%8D</span><span class="decorator">%E8</span><span class="decorator">%BD</span><span class="decorator">%AC</span>)
</code></pre><h2 id="具体实现">具体实现</h2><p>常见的缓存代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="keyword">extends</span> <span class="title">BaseModel</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getList</span><span class="params">($id)</span></span></span></span><br><span class="line"><span class="php">    &#123;   </span></span><br><span class="line"><span class="php">        $key = <span class="keyword">$this</span>-&gt;getCacheKey($id);</span></span><br><span class="line"><span class="php">        $ret = Cache::get($key);</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (<span class="keyword">empty</span>($ret)) &#123;</span></span><br><span class="line"><span class="php">            $ret = <span class="keyword">$this</span>-&gt;getFromDb($id);</span></span><br><span class="line"><span class="php">            Cache::put($key, $ret, <span class="number">1000</span>);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> $ret;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCacheKey</span><span class="params">($id)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        ......</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">geFromDb</span><span class="params">($id)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        ......</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这样的代码带来的问题是缓存系统和数据代码高度耦合，如果需要更换或者撤销缓存系统，代码很难修改，也不好预测风险。接下来我们通过简单的几步来实现非侵入式缓存系统。</p>
<p>第一步先抽象出接口<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">interface UserModelInterface </span><br><span class="line">&#123;</span><br><span class="line">    public function getList(<span class="variable">$id</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第二步UserModel实现 UserModelInterface</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="keyword">extends</span> <span class="title">BaseModel</span> <span class="keyword">implements</span> <span class="title">UserModelInterface</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getList</span><span class="params">($id)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getFromDb($id);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    ......</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>
<p>第三步使用装饰模式建立UserModelCache<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">UserModelCache</span> <span class="keyword">extends</span> <span class="title">BaseModelCache</span> <span class="keyword">implements</span> <span class="title">UserModelInterface</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserModel $model)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">parent</span>::__construct($model);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getList</span><span class="params">($id)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;cache(<span class="keyword">__METHOD__</span>, $id, <span class="number">10000</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * 需要缓存的数据都可以通过 </span><br><span class="line">     * 这个类里来实现，可以通过 UserModelInterface 约束都需要实现的方法</span><br><span class="line">     * 如果不需要缓存的方法，会通过 BaseModelCache 的 __call 方法拦截，</span><br><span class="line">     * 并且穿透到 UserModel 的类里面去调用。</span><br><span class="line">     * </span><br><span class="line">     * 一个不需要cache的方法调用过程：</span><br><span class="line">     * 例如调用 UserModelCache-&gt;getAll()方法，因为 UserModelCache 没有该方法，</span><br><span class="line">     * 所以会寻找父类 BaseModelCache ，父类</span><br><span class="line">     * 也没有该方法，会被 BaseModelCache 的 __call 拦截，最后走到 UserModel-&gt;getAll()</span><br><span class="line">     * 这样，只要在UserModel 实现这个 getAll 就可以了。</span><br><span class="line">     *</span><br><span class="line">     * 需要cache的方法调用：</span><br><span class="line">     * 调用 getList 会走到父类的 cache 方法，cache 方法根据传递参数生成了 cahce id, 通过</span><br><span class="line">     * Cache 获取数据，获取不到数据，还会走 UserModel -&gt; getList 方法，这样就实现了缓存功能，</span><br><span class="line">     * 而在 UserModel 里面没有嵌入任何代码。</span><br><span class="line">     *</span><br><span class="line">     * 关于如果灵活实用 cahce 的问题，稍后会介绍。</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">BaseModelCache</span></span></span></span><br><span class="line"><span class="php">&#123;   </span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $model = <span class="keyword">null</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(BaseModel $model)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;model = $model;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($method, $params)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">// 通过 __call 方法来穿透 UserModelCache 不需要缓存或者未实现的方法，让 __call 去调用</span></span></span><br><span class="line"><span class="php">        <span class="comment">// UserModel 的方法</span></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> call_user_func_array([<span class="keyword">$this</span>-&gt;model, $method], $params);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">cache</span><span class="params">($method, $params, $expire)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $key = <span class="keyword">$this</span>-&gt;getCacheKey($method, $params);</span></span><br><span class="line"><span class="php">        $ret = Cache::get($key);</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (!$ret || CACHE_OPEN !== <span class="keyword">true</span>) &#123;</span></span><br><span class="line"><span class="php">            $ret = call_user_func_array([<span class="keyword">$this</span>-&gt;model, $method], $params);</span></span><br><span class="line"><span class="php">            Cache::put($key, $ret, $expire);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> $ret;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getCacheKey</span><span class="params">($method, $params)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> $key ....</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>第四步灵活使用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="comment">// 如果没有使用框架提供的依赖注入机制，那么就要自己手动完成了。</span></span></span><br><span class="line"><span class="php"><span class="comment">// 例如调用 UserModel 的 getList 方法</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(UserModelInterface $user)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $user = <span class="keyword">new</span> UserModelCache();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">// 直接走 UserModel</span></span></span><br><span class="line"><span class="php">        <span class="comment">// $user = new UserModel();</span></span></span><br><span class="line"><span class="php">        <span class="comment">// </span></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> $user-&gt;getList();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">// 现在的很多框架都提供了依赖注入的功能，这些功能用起来更方便强大，可以让用户通过简单的配置</span></span></span><br><span class="line"><span class="php"><span class="comment">// 来实现注入的内容，下面用 lumen 和 yii2 做两个简单的说明</span></span></span><br></pre></td></tr></table></figure></p>
<p>第五部 lumen 和 yii2 依赖注入</p>
<p>通过 lumen 的 ServiceProvider 来提供依赖注入<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 具体的路径和名称空间根据自己的实际情况来</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line">$app-&gt;when(<span class="string">'App\Http\Controllers\UserController'</span>)</span><br><span class="line">-&gt;needs(<span class="string">'App\Models\UserModelInterface'</span>)</span><br><span class="line">-&gt;give(<span class="string">'App\Models\Cache\UserModelCache'</span>);</span><br><span class="line"><span class="comment">//-&gt;give('App\Models\Cache\UserModel'); 不需要缓存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 controller 里面直接就被注入了 UserModelCache</span></span><br><span class="line"><span class="comment">// 如果需要其他的缓存，只需要修改此处的 give 就行了，这样就实现了</span></span><br><span class="line"><span class="comment">// 灵活配置，不需要对底层的代码进行修改</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(UserModelInterface $user)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $user-&gt;getList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>yii2 是通过 ServiceLoader 和 DI 容器来实现的，涉及 Container 相关的类，具体可以参考 yii2 的文档<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$container = <span class="keyword">new</span> yii\di\Container();</span><br><span class="line">$container-&gt;set(<span class="string">'UserModelInterface'</span>, <span class="string">'UserModelCache'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">$user = $container-&gt;get(<span class="string">'UserModelInterface'</span>);</span><br></pre></td></tr></table></figure></p>
<p>以上代都是为了演示，并不是真实使用环境，和真实环境有差异，请自行调整</p>
<p>END.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;本文的目标&quot;&gt;本文的目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;简单几步，轻松实现非侵入式缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;本文的涉及名词&quot;&gt;本文的涉及名词&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;装饰模式 (也叫修饰模式，只是翻译不同)&lt;/li&gt;
&lt;li&gt;非侵入式&lt;/li&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Some Git Tips</title>
    <link href="http://rust.love/2016/01/15/some_git_tils/"/>
    <id>http://rust.love/2016/01/15/some_git_tils/</id>
    <published>2016-01-15T04:21:23.000Z</published>
    <updated>2016-01-29T05:59:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>查看操作历史记录<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git reflog</span></span><br></pre></td></tr></table></figure></p>
<p>不跟踪已经加入版本库的文件在本地的修改<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.gitignore 加入该文件 filename</span><br><span class="line">git <span class="keyword">update</span>-<span class="keyword">index</span> <span class="comment">--no-assume-unchanged filename</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;查看操作历史记录&lt;br&gt;&lt;figure class=&quot;highlight ebnf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Yaf framework 相关</title>
    <link href="http://rust.love/2016/01/05/yaf_php_framework/"/>
    <id>http://rust.love/2016/01/05/yaf_php_framework/</id>
    <published>2016-01-05T09:38:56.000Z</published>
    <updated>2016-01-05T09:39:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Yaf_项目骨架">Yaf 项目骨架</h1><p>在 yaf 的源码目录，附带了一个工具 tools 目录， 下面有个 cg/yaf_cg 工具，是通过模版生成 yaf 项目骨架的工具。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">./yaf_cg ApplicationName [ApplicationPath]</span><br></pre></td></tr></table></figure>
<p>项目目录<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── application</span><br><span class="line">│   ├── Bootstrap.php</span><br><span class="line">│   ├── controllers</span><br><span class="line">│   ├── library</span><br><span class="line">│   ├── models</span><br><span class="line">│   ├── plugins</span><br><span class="line">│   └── views</span><br><span class="line">├── conf</span><br><span class="line">│   └── application.ini</span><br><span class="line">└── index.php</span><br></pre></td></tr></table></figure></p>
<ol>
<li>index.php 程序的入口文件</li>
<li><p>application 主要的应用程序代码目录。<br>2.1 可以通过<code>application.directory</code>这个配置来修改。<br>2.2 application 目录下的目录（controllers、models、plugins、views）是默认的代码结构目录，yaf 会根据相关的类名称，去相关目录下加载相关的文件，例如 <code>IndexController extends Yaf\Controller_Abstract</code> 这个文件，yaf 就会到 <code>controllers</code> 目录下查找 Index.php、类<code>UserModel</code>就会到 models 目录下查找 User.php（可以定制文件后缀或前缀模式，如 ModelUser 就是前缀模式）。<br>2.3 除了 library 目录以外，其它目录都是在框架编译的时候确定的，library 目录主要是存放一些本地库文件例如我有个<code>Helper_Html (名称空间模式 Helper\Html)</code>类，通过注册本地类名称空间<code>Yaf_Loader::registerLocalNamespace(&quot;Helper&quot;)</code>来加载，文件的存储结构是 <code>library/helper/Html.php</code> 需要注意的就是要开启名称空间，使用<code>namespace</code>的类名称和不使用<code>namespace</code>的 classname 有些差异。<br>2.4 Bootstrap.php 是框架的引导类 (可以没有)，继承自 <code>Yaf\Bootstrap_Abstract</code>，在 Application 对象创建的时候可以调用 <code>$application-&gt;bootstrap()-&gt;run()</code> 这样会执行Bootstrap类里所有<code>_init</code>开头的方法，一般用于初始化一些配置或者数据或者初始化plugin等资源。</p>
</li>
<li><p>conf 是配置文件目录， 也是可以修改的。</p>
</li>
</ol>
<h1 id="Yaf_完成一次请求的流程图">Yaf 完成一次请求的流程图</h1><p><img src="/images/yaf_sequence.png" alt="yaf流程图"></p>
<h1 id="流程解读">流程解读</h1><h2 id="index-php_入口">index.php 入口</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">'APPLICATION_PATH'</span>, dirname(<span class="keyword">__FILE__</span>));</span><br><span class="line"></span><br><span class="line">$application = <span class="keyword">new</span> Yaf\Application(APPLICATION_PATH . <span class="string">"/conf/application.ini"</span>);</span><br><span class="line">$application-&gt;bootstrap() <span class="comment">// 执行引导类Bootstrap.php 相关的引导方法</span></span><br><span class="line">    -&gt;run();</span><br></pre></td></tr></table></figure>
<h2 id="Bootstrap-php_引导类">Bootstrap.php 引导类</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有的 _init 开头的的方法，都会被执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bootstrap</span> <span class="keyword">extends</span> <span class="title">Yaf</span>\<span class="title">Bootstrap_Abstract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化本地类库的名称空间 Biz Ns</span></span><br><span class="line"><span class="comment">     * 例如本地类库 Biz_Test, Ns\Test 放在library目录下</span></span><br><span class="line"><span class="comment">     * library/biz/Test.php  </span></span><br><span class="line"><span class="comment">     * library/ns/Test.php</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_initRegisterLocalClass</span><span class="params">(Yaf\Dispatcher $dispatcher)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $loader = Yaf\Loader::getInstance();</span><br><span class="line">        $loader-&gt;registerLocalNamespace(<span class="keyword">array</span>(<span class="string">"Biz"</span>, <span class="string">"Ns"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化一些配置信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_initConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $arrConfig = Yaf\Application::app()-&gt;getConfig();</span><br><span class="line">        Yaf\Registry::set(<span class="string">'config'</span>, $arrConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_initPlugin</span><span class="params">(Yaf\Dispatcher $dispatcher)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化一些插件， 插件文件存放在 plugins 目录，</span></span><br><span class="line">        <span class="comment">// 类名字规则是 XxxxPlugin 放在 plugins 下的 Xxxx.php 文件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_initRoute</span><span class="params">(Yaf\Dispatcher $dispatcher)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 增加一些路由规则</span></span><br><span class="line">        <span class="comment">// 默认是 Yaf_Route_Static</span></span><br><span class="line">        <span class="comment">// 支持以下方式</span></span><br><span class="line">        <span class="comment">// Yaf_Route_Simple</span></span><br><span class="line">        <span class="comment">// Yaf_Route_Supervar</span></span><br><span class="line">        <span class="comment">// Yaf_Route_Static</span></span><br><span class="line">        <span class="comment">// Yaf_Route_Map</span></span><br><span class="line">        <span class="comment">// Yaf_Route_Rewrite</span></span><br><span class="line">        <span class="comment">// Yaf_Route_Regex</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    …… 可以做更多的事情</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="插件_Plugins">插件 Plugins</h2><p>创建一个插件 Sample<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sample.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SamplePlugin</span> <span class="keyword">extends</span> <span class="title">Yaf</span>\<span class="title">Plugin_Abstract</span> </span>&#123;</span><br></pre></td></tr></table></figure></p>
<p>插件定义了6个 hook<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">routerStartup</span></span><br><span class="line"><span class="attribute">routerShutdown</span></span><br><span class="line"><span class="attribute">dispatchLoopStartup</span></span><br><span class="line"><span class="attribute">preDispatch</span></span><br><span class="line"><span class="attribute">postDispatch</span></span><br><span class="line"><span class="attribute">dispatchLoopShutdown</span></span><br></pre></td></tr></table></figure></p>
<p>插件的执行顺序是先进先调用。</p>
<h2 id="路由规则_routes">路由规则 routes</h2><p>yaf 支持多种路由规则，默认采用了<code>Yaf_Route_Static</code>方式，支持以下方式<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Yaf_Route_Simple</span><br><span class="line">Yaf_Route_Supervar</span><br><span class="line">Yaf_Route_Static</span><br><span class="line">Yaf_Route_Map</span><br><span class="line">Yaf_Route_Rewrite</span><br><span class="line">Yaf_Route_Regex</span><br></pre></td></tr></table></figure></p>
<p>路由规则可以配置在 application.ini 配置文件内，也可以在程序初始化的时候动态生成增加，用户也可以通过实现<code>Route_Interface</code>接口，自定义路由规则。具体各种路由协议的含义和使用方式见<a href="http://www.laruence.com/manual/yaf.routes.html" target="_blank" rel="noopener">路由协议详解</a>。</p>
<h2 id="视图_Views">视图 Views</h2><p>yaf 的视图文件默认放在 views 目录下，默认文件后缀名称 <code>.phtml</code>，view 文件就是 php 文件。</p>
<h2 id="模块_modules_支持">模块 modules 支持</h2><ol>
<li><p>yaf 默认支持模块的，在默认的路由模式下，一般请求的路径为 <code>/index.php/Module/Controller/Action/p1/v1/p2/v2</code> （通过 rewrite 规则去除 index.php）就是 <code>/Module/Controller/Action/p1/v1/p2/v2</code></p>
</li>
<li><p>如果不指定默认的模块控制器和action，那么这三个值默认为<code>Index</code>，请求 <code>/index.php</code> 执行的路由规则就是 <code>/Index/Index/Index</code>。</p>
</li>
<li><p>增加一个模块 Test, 需要配置 <code>application.modules=&quot;Index,Test&quot;</code> ，且在 applications 下增加 modules/Test/controllers 文件夹，这样 <code>/test/index/index</code> 就会执行 <code>modules/Test/controllers/Index.php</code> 文件的 <code>indexAction</code> 方法</p>
</li>
<li><p>如果只有一个默认 module ，那么不需要 modules 文件夹。</p>
</li>
</ol>
<h2 id="引入外部库">引入外部库</h2><h3 id="composer_方式">composer 方式</h3><p>通过 composer 安装的第三方库都会带有autoload.php 文件，那么根据具体的情况可以在 index.php 入口文件或者 Bootstrap 引导类内，加载这个 autoload.php 文件来使用外部类，例如<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// index.php</span></span><br><span class="line">define(<span class="string">'APPLICATION_PATH'</span>, </span><br><span class="line">dirname(<span class="keyword">__FILE__</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入第三方类库</span></span><br><span class="line"><span class="keyword">require</span>(APPLICATION_PATH . <span class="string">'/vendor/autoload.php'</span>);</span><br><span class="line"></span><br><span class="line">$application = <span class="keyword">new</span> Yaf\Application(APPLICATION_PATH . <span class="string">"/conf/application.ini"</span>);</span><br><span class="line">$application-&gt;bootstrap()</span><br><span class="line"> -&gt;run();</span><br><span class="line"></span><br><span class="line">在 Controller 使用第三方库</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">GuzzleHttp</span>\<span class="title">Client</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Yaf</span>\<span class="title">Controller_Abstract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">indexAction</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        $httpClient = <span class="keyword">new</span> Client();</span><br><span class="line">        var_dump($httpClient);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="全局库_yaf-library">全局库 yaf.library</h3><p>这个配置选项是配置在 php.ini 内的，例如多个项目需要公用一些全局的库文件，那么通过指定该路径，来让不同的项目之间共享同一个库文件。</p>
<h3 id="自定义_class_loader">自定义 class loader</h3><p>如果你的库文件命名方式等不符合 yaf 的自动加载风格，那么可以自定义 auto 方式，可以在 Bootstrap 引导类加载的时候进行注册。</p>
<h1 id="主要类库代码解析">主要类库代码解析</h1><h3 id="Yaf_Loader::autoload">Yaf_Loader::autoload</h3><p>这个是 Yaf 自动加载类的函数， 整个加载行为会受到 <code>yaf.use_spl_autoload</code> 这个配置的影响，开启的情况下, Yaf在加载不成功的情况下, 会继续让PHP的自动加载函数加载，否则会触发 E_WARNING 或者 E_STRICT 下面是相关部分源码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (yaf_internal_autoload(file_name, file_name_len, &amp;directory TSRMLS_CC)) &#123;</span><br><span class="line">    <span class="keyword">char</span> *lc_classname = zend_str_tolower_dup(origin_classname, class_name_len);</span><br><span class="line">    <span class="keyword">if</span> (zend_hash_exists(EG(class_table), lc_classname, class_name_len + <span class="number">1</span>)) &#123;</span><br><span class="line">        ……</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        efree(lc_classname);</span><br><span class="line">        php_error_docref(<span class="literal">NULL</span> TSRMLS_CC, E_STRICT, <span class="string">"Could not find class %s in %s"</span>, class_name, directory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  <span class="keyword">else</span> &#123;</span><br><span class="line">    php_error_docref(<span class="literal">NULL</span> TSRMLS_CC, E_WARNING, <span class="string">"Failed opening script %s: %s"</span>, directory, strerror(errno));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Yaf_Loader::autoload_流程图">Yaf_Loader::autoload 流程图</h3><p><img src="/images/autoload.png" alt="Yaf_Loader::autoload 流程图"></p>
<ol>
<li>将 \ 处理为 <em> 主要是为了让类名无论是名称空间模式，还是 </em> 模式，都兼容。</li>
<li>确定文件目录位置： 主要是根据系统的几个固定目录来判断文件的位置 controllers、models、plugins、library 等。</li>
</ol>
<h3 id="Yaf_Application::bootstrap">Yaf_Application::bootstrap</h3><p>除了 autoload 是一个比较重要的方法以外，bootstrap 也是一个比较重要的方法，因为经常会有很多数据初始化等代码需要在这个阶段来做，<code>bootstrap()</code>方法的主要工作就是循环遍历 <code>Bootstrap extends Yaf_Bootstrap</code> 这个类的所有以 _init 开头的方法，相关代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">methods = &amp;((*ce)-&gt;function_table);</span><br><span class="line"><span class="keyword">for</span>(zend_hash_internal_pointer_reset(methods);</span><br><span class="line">        zend_hash_has_more_elements(methods) == SUCCESS;</span><br><span class="line">        zend_hash_move_forward(methods)) &#123;</span><br><span class="line">    <span class="keyword">char</span> *func;</span><br><span class="line">    uint len;</span><br><span class="line">    ulong idx;</span><br><span class="line">    zend_hash_get_current_key_ex(methods, &amp;func, &amp;len, &amp;idx, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">/* cann't use ZEND_STRL in strncasecmp, it cause a compile failed in VS2009 */</span></span><br><span class="line">    <span class="comment">/* YAF_BOOTSTRAP_INITFUNC_PREFIX 就是 _init */</span></span><br><span class="line">    <span class="keyword">if</span> (strncasecmp(func, YAF_BOOTSTRAP_INITFUNC_PREFIX, <span class="keyword">sizeof</span>(YAF_BOOTSTRAP_INITFUNC_PREFIX)<span class="number">-1</span>)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    zend_call_method(&amp;bootstrap, *ce, <span class="literal">NULL</span>, func, len - <span class="number">1</span>, <span class="literal">NULL</span>, <span class="number">1</span>, dispatcher, <span class="literal">NULL</span> TSRMLS_CC);</span><br><span class="line">    <span class="comment">/** an uncaught exception threw in function call */</span></span><br><span class="line">    <span class="keyword">if</span> (EG(exception)) &#123;</span><br><span class="line">        zval_ptr_dtor(&amp;bootstrap);</span><br><span class="line">        RETURN_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Yaf_Dispatcher">Yaf_Dispatcher</h3><p>Yaf_Dispatcher 是个非常重要的的类，基本贯穿了整个开发过程，包括 plugin 的注册和调用，都和 Yaf_Dispatcher 这个类密切相关。注册类的代码非常简单<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PHP_METHOD(yaf_dispatcher, registerPlugin) &#123;</span><br><span class="line">    zval *plugin, *plugins;</span><br><span class="line">    <span class="keyword">yaf_dispatcher_t</span> *self = getThis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, <span class="string">"z"</span>, &amp;plugin) == FAILURE) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Z_TYPE_P(plugin) != IS_OBJECT || !instanceof_function(Z_OBJCE_P(plugin), yaf_plugin_ce TSRMLS_CC)) &#123;</span><br><span class="line">        php_error_docref(<span class="literal">NULL</span> TSRMLS_CC, E_WARNING, <span class="string">"Expect a %s instance"</span>, yaf_plugin_ce-&gt;name);</span><br><span class="line">        RETURN_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    plugins = zend_read_property(yaf_dispatcher_ce, self, ZEND_STRL(YAF_DISPATCHER_PROPERTY_NAME_PLUGINS), <span class="number">1</span> TSRMLS_CC);</span><br><span class="line"></span><br><span class="line">    Z_ADDREF_P(plugin);</span><br><span class="line">    add_next_index_zval(plugins, plugin);</span><br><span class="line"></span><br><span class="line">    RETVAL_ZVAL(self, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>调用插件以及插件中的 6 个 hook 的代码主要集中在 <code>yaf_response_t * yaf_dispatcher_dispatch(yaf_dispatcher_t *dispatcher TSRMLS_DC)</code> 方法内，主要是 Yaf_Application::run() 的时候，调用该方法。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 代表了 hook 的 6 个阶段</span></span><br><span class="line"><span class="comment">    YAF_PLUGIN_HOOK_ROUTESTARTUP</span></span><br><span class="line"><span class="comment">    YAF_PLUGIN_HOOK_ROUTESHUTDOWN</span></span><br><span class="line"><span class="comment">    YAF_PLUGIN_HOOK_LOOPSTARTUP</span></span><br><span class="line"><span class="comment">    YAF_PLUGIN_HOOK_PREDISPATCH</span></span><br><span class="line"><span class="comment">    YAF_PLUGIN_HOOK_POSTDISPATCH</span></span><br><span class="line"><span class="comment">    YAF_PLUGIN_HOOK_LOOPSHUTDOWN</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!yaf_request_is_routed(request TSRMLS_CC)) &#123;</span><br><span class="line">    YAF_PLUGIN_HANDLE(plugins, YAF_PLUGIN_HOOK_ROUTESTARTUP, request, response);</span><br><span class="line">    YAF_EXCEPTION_HANDLE(dispatcher, request, response);</span><br><span class="line">    <span class="keyword">if</span> (!yaf_dispatcher_route(dispatcher, request TSRMLS_CC)) &#123;</span><br><span class="line">        yaf_trigger_error(YAF_ERR_ROUTE_FAILED TSRMLS_CC, <span class="string">"Routing request failed"</span>);</span><br><span class="line">        YAF_EXCEPTION_HANDLE_NORET(dispatcher, request, response);</span><br><span class="line">        zval_ptr_dtor(&amp;response);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    yaf_dispatcher_fix_default(dispatcher, request TSRMLS_CC);</span><br><span class="line">    YAF_PLUGIN_HANDLE(plugins, YAF_PLUGIN_HOOK_ROUTESHUTDOWN, request, response);</span><br><span class="line">    YAF_EXCEPTION_HANDLE(dispatcher, request, response);</span><br><span class="line">    (<span class="keyword">void</span>)yaf_request_set_routed(request, <span class="number">1</span> TSRMLS_CC);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    yaf_dispatcher_fix_default(dispatcher, request TSRMLS_CC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">YAF_PLUGIN_HANDLE(plugins, YAF_PLUGIN_HOOK_LOOPSTARTUP, request, response);</span><br><span class="line">YAF_EXCEPTION_HANDLE(dispatcher, request, response);</span><br><span class="line"></span><br><span class="line">view = yaf_dispatcher_init_view(dispatcher, <span class="literal">NULL</span>, <span class="literal">NULL</span> TSRMLS_CC);</span><br><span class="line"><span class="keyword">if</span> (!view) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    YAF_PLUGIN_HANDLE(plugins, YAF_PLUGIN_HOOK_PREDISPATCH, request, response);</span><br><span class="line">    YAF_EXCEPTION_HANDLE(dispatcher, request, response);</span><br><span class="line">    <span class="keyword">if</span> (!yaf_dispatcher_handle(dispatcher, request, response, view TSRMLS_CC)) &#123;</span><br><span class="line">        YAF_EXCEPTION_HANDLE(dispatcher, request, response);</span><br><span class="line">        zval_ptr_dtor(&amp;response);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    yaf_dispatcher_fix_default(dispatcher, request TSRMLS_CC);</span><br><span class="line">    YAF_PLUGIN_HANDLE(plugins, YAF_PLUGIN_HOOK_POSTDISPATCH, request, response);</span><br><span class="line">    YAF_EXCEPTION_HANDLE(dispatcher, request, response);</span><br><span class="line">&#125; <span class="keyword">while</span> (--nesting &gt; <span class="number">0</span> &amp;&amp; !yaf_request_is_dispatched(request TSRMLS_CC));</span><br><span class="line"></span><br><span class="line">YAF_PLUGIN_HANDLE(plugins, YAF_PLUGIN_HOOK_LOOPSHUTDOWN, request, response);</span><br><span class="line">YAF_EXCEPTION_HANDLE(dispatcher, request, response);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == nesting &amp;&amp; !yaf_request_is_dispatched(request TSRMLS_CC)) &#123;</span><br><span class="line">    yaf_trigger_error(YAF_ERR_DISPATCH_FAILED TSRMLS_CC, <span class="string">"The max dispatch nesting %ld was reached"</span>, YAF_G(forward_limit));</span><br><span class="line">    YAF_EXCEPTION_HANDLE_NORET(dispatcher, request, response);</span><br><span class="line">    zval_ptr_dtor(&amp;response);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上就是几个主要的类和相关代码流程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Yaf_项目骨架&quot;&gt;Yaf 项目骨架&lt;/h1&gt;&lt;p&gt;在 yaf 的源码目录，附带了一个工具 tools 目录， 下面有个 cg/yaf_cg 工具，是通过模版生成 yaf 项目骨架的工具。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL5.6 部分特性介绍</title>
    <link href="http://rust.love/2015/12/22/mysql-56-some-feature/"/>
    <id>http://rust.love/2015/12/22/mysql-56-some-feature/</id>
    <published>2015-12-22T09:24:29.000Z</published>
    <updated>2015-12-22T09:25:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Memcached">Memcached</h3><p>登陆 MySQL 查看插件目录，安装对应的配置数据表<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql -hlocalhost -uroot -p</span><br><span class="line">mysql &gt; SELECT @@plugin<span class="emphasis">_dir; // 查看插件目录</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">// 导入 memcache 相关的表</span></span><br><span class="line"><span class="emphasis">mysql &gt; SOURCE /usr/local/mysql/share/innodb_</span>memcached<span class="emphasis">_config.sql</span></span><br><span class="line"><span class="emphasis">Query OK, 1 row affected (0.00 sec)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">Database changed</span></span><br><span class="line"><span class="emphasis">Query OK, 0 rows affected (0.02 sec)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">// 多了一个 innodb_</span>memcache 库</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line"><span class="code">+------------------------+</span></span><br><span class="line">| Database               |</span><br><span class="line"><span class="code">+------------------------+</span></span><br><span class="line">| information<span class="emphasis">_schema     |</span></span><br><span class="line"><span class="emphasis">| innodb_</span>memcache        |</span><br><span class="line">| test                   |</span><br><span class="line"><span class="code">+------------------------+</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure></p>
<p>激活和卸载插件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> INSTALL PLUGIN daemon_memcached soname <span class="string">"libmemcached.so"</span>;  //  激活插件</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> UNINSTALL PLUGIN daemon_memcached; // 卸载插件</span></span><br></pre></td></tr></table></figure></p>
<p>通过 MySQL 查看配置信息<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">myssql&gt; SHOW <span class="keyword">VARIABLES</span> LIKE <span class="comment">'%memcached%'</span>;</span><br><span class="line"></span><br><span class="line">daemon_memcached_enable_binlog  OFF</span><br><span class="line">daemon_memcached_engine_lib_name    innodb_engine.so</span><br><span class="line">daemon_memcached_engine_lib_path    </span><br><span class="line">daemon_memcached_option </span><br><span class="line">daemon_memcached_r_batch_size   <span class="number">1</span></span><br><span class="line">daemon_memcached_w_batch_size   <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>查看 Memcached<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">shell &gt; telnet localhost <span class="number">11211</span></span><br><span class="line">stats</span><br><span class="line"></span><br><span class="line">Trying ::<span class="number">1</span>...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">stats</span><br><span class="line"><span class="keyword">STAT</span> pid <span class="number">94</span></span><br><span class="line"><span class="keyword">STAT</span> uptime <span class="number">317</span></span><br><span class="line"><span class="keyword">STAT</span> time <span class="number">1450766105</span></span><br><span class="line"><span class="keyword">STAT</span> version <span class="number">5.6</span><span class="number">.27</span></span><br><span class="line"><span class="keyword">STAT</span> libevent <span class="number">5.6</span><span class="number">.27</span></span><br><span class="line"><span class="keyword">STAT</span> pointer_size <span class="number">64</span></span><br><span class="line"><span class="keyword">STAT</span> rusage_user <span class="number">16.726572</span></span><br><span class="line"><span class="keyword">STAT</span> rusage_system <span class="number">18.890886</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure></p>
<p>innodb_memcache 库的详细信息<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use innodb<span class="emphasis">_memcache;</span></span><br><span class="line"><span class="emphasis">Reading table information for completion of table and column names</span></span><br><span class="line"><span class="emphasis">You can turn off this feature to get a quicker startup with -A</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">Database changed</span></span><br><span class="line"><span class="emphasis">mysql&gt; show tables;</span></span><br><span class="line"><span class="emphasis">+---------------------------+</span></span><br><span class="line"><span class="emphasis">| Tables_</span>in<span class="emphasis">_innodb_</span>memcache |</span><br><span class="line"><span class="code">+---------------------------+</span></span><br><span class="line">| cache<span class="emphasis">_policies            |</span></span><br><span class="line"><span class="emphasis">| config_</span>options            |</span><br><span class="line">| containers                |</span><br><span class="line"><span class="code">+---------------------------+</span></span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p>cache_policies 缓存策略</p>
<ul>
<li>innodb_only 只使用InnoDB作为数据存储</li>
<li>cache-only  只使用传统的Memcached引擎作为后端存储</li>
<li>caching     二者皆使用，如果在Memcached里找不到，就查询InnoDB</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from cache_policies \G</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">** 1. row **</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span><br><span class="line">  policy<span class="emphasis">_name: cache_</span>policy</span><br><span class="line">   get<span class="emphasis">_policy: innodb_</span>only</span><br><span class="line">   set<span class="emphasis">_policy: innodb_</span>only</span><br><span class="line">delete<span class="emphasis">_policy: innodb_</span>only</span><br><span class="line"> flush<span class="emphasis">_policy: innodb_</span>only</span><br></pre></td></tr></table></figure>
<p>config_options 配置参数</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from config_options \G</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">** 1. row **</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span><br><span class="line"> name: separator   // Memcached只识别单值，使用此分隔符（|）来连接多个字段的值，需要注意当值内含有<span class="code">`|`</span>的时候，会带来错误，所以需要修改 separator</span><br><span class="line">value: |</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">** 2. row **</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span><br><span class="line"> name: table<span class="emphasis">_map_</span>delimiter // 通过此分隔符（.）来确认表和键，如：@@table.key。</span><br><span class="line">value: .</span><br></pre></td></tr></table></figure>
<p>如果通过 Memcached 协议来访问数据表，还需要在 containers 表里做一些配置 <code>demo_test</code> 是开始 SOURCE 导入 <code>innodb_memcached_config.sql</code> 文件的时候生成的。</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM containers\G</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">** 1. row **</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span><br><span class="line"><span class="code">                  name: aaa</span></span><br><span class="line"><span class="code">             db_schema: test</span></span><br><span class="line"><span class="code">              db_table: demo_test</span></span><br><span class="line"><span class="code">           key_columns: c1</span></span><br><span class="line"><span class="code">         value_columns: c2</span></span><br><span class="line"><span class="code">                 flags: c3</span></span><br><span class="line"><span class="code">            cas_column: c4</span></span><br><span class="line"><span class="code">    expire_time_column: c5</span></span><br><span class="line">unique<span class="emphasis">_idx_</span>name<span class="emphasis">_on_</span>key: PRIMARY</span><br></pre></td></tr></table></figure>
<p>查看 demo_test 表结构<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DESC test.demo<span class="emphasis">_test;</span></span><br><span class="line"><span class="emphasis">+-------+---------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="emphasis">| Field | Type                | Null | Key | Default | Extra |</span></span><br><span class="line"><span class="emphasis">+-------+---------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="emphasis">| c1    | varchar(32)         | NO   | PRI |         |       |</span></span><br><span class="line"><span class="emphasis">| c2    | varchar(1024)       | YES  |     | NULL    |       |</span></span><br><span class="line"><span class="emphasis">| c3    | int(11)             | YES  |     | NULL    |       |</span></span><br><span class="line"><span class="emphasis">| c4    | bigint(20) unsigned | YES  |     | NULL    |       |</span></span><br><span class="line"><span class="emphasis">| c5    | int(11)             | YES  |     | NULL    |       |</span></span><br><span class="line"><span class="emphasis">+-------+---------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="emphasis">5 rows in set (0.01 sec)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">mysql&gt; select * from test.demo_</span>test;</span><br><span class="line"><span class="code">+----+</span>--------------<span class="code">+------+</span>------<span class="code">+------+</span></span><br><span class="line">| c1 | c2           | c3   | c4   | c5   |</span><br><span class="line"><span class="code">+----+</span>--------------<span class="code">+------+</span>------<span class="code">+------+</span></span><br><span class="line">| AA | HELLO, HELLO |    8 |    0 |    0 |</span><br><span class="line"><span class="code">+----+</span>--------------<span class="code">+------+</span>------<span class="code">+------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p>通过 Memcached 协议获得数据<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">shell</span>&gt; telnet localhost <span class="number">11211</span></span><br><span class="line">Trying ::<span class="number">1</span>...</span><br><span class="line">Connected <span class="keyword">to</span> localhost.</span><br><span class="line">Escape character <span class="keyword">is</span> <span class="string">'^]'</span>.</span><br><span class="line"><span class="built_in">get</span> @@aaa.AA   // aaa 就是 containers 表的 name 字段的值，相当于 `db_schema.db_table`</span><br><span class="line">VALUE @@aaa.AA <span class="number">8</span> <span class="number">12</span> // VALUE <span class="symbol">&lt;key&gt;</span> <span class="symbol">&lt;flags&gt;</span> <span class="symbol">&lt;bytes&gt;</span></span><br><span class="line">HELLO, HELLO</span><br><span class="line">END</span><br></pre></td></tr></table></figure></p>
<p>通过 php 来访问这个数据<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$mc = new Memcache();</span><br><span class="line">$mc-&gt;connect(<span class="string">'127.0.0.1'</span>, <span class="number">11211</span>);</span><br><span class="line">var_dump($mc-&gt;get(<span class="string">'@@aaa.AA'</span>));  <span class="regexp">//</span> 这里需要注意如果 <span class="string">`containers`</span> 有多行数据的时候，需要使用表前缀 <span class="string">`@@name.`</span> 如果不使用表名，那么会默认会按照表名的字母顺序，取第一个。如果 <span class="string">`containers`</span> 只有一行数据 name 为 <span class="string">`aaa`</span>，那么默认 <span class="string">`get('AA')`</span> 也是会取 <span class="string">`@aaa.AA`</span></span><br></pre></td></tr></table></figure></p>
<h3 id="DDL_online">DDL online</h3><p>修改表结构是我们开发过程中经常遇到的事情，早期 MySQL 版本在修改表结构的时候，主要采用以下方式：</p>
<ul>
<li>创建临时表 <code>tmp</code> ，该表与原表 <code>table</code> 相似</li>
<li>将<code>table</code>数据复制到 <code>tmp</code>，</li>
<li>删除原有表 <code>table</code></li>
<li>rename tmp to table<br>如果数据量非常大的情况下，整个表被加共享锁，基本就不能提供服务了。</li>
</ul>
<p>在 MySQL5.6 中，这个操作有了改善，在 <code>ALERT TABLE</code> 语法上，增加了 <code>| ALGORITHM [=] {DEFAULT|INPLACE|COPY}</code> 选项，如果没有指定 <code>ALGORITHM</code> ，MySQL 会根据支持的算法，自动选择，而 <code>INPLACE</code> 会优先被选择，这样就可以在修改表的时候依然可以提供服务。有些 Online DDL 是不支持的，有些是有依赖条件的，MySQL 官方明确的列出了一个表格 <a href="https://dev.mysql.com/doc/refman/5.6/en/innodb-create-index-overview.html" target="_blank" rel="noopener">Online DDL 操作总结</a></p>
<h3 id="MySQL_复制的新特性">MySQL 复制的新特性</h3><ul>
<li><p>多线程复制 由于数据库的主从架构，以前的MySQL版本主库多线程写入，为了保证<code>顺序</code>从库是单线程读取，现在的多线程复制是为每个数据库开启了一个单独的线程（sql thread），所以如果要使用多线程复制特性，需要把库拆分成多个，如果还是一个数据库，那么这个多线程复制特性无效。</p>
</li>
<li><p>GTID 全局事务ID（global transaction identifier），GTID 是事务提交时创建分配的唯一标识符，所有事务均与 GTID 一一映射。以前如果主从复制断了，需要人工去找到断点，重新开始，而 GTID 的引入可以自动寻找同步点，自动完成复制，不需要人工干预。</p>
</li>
<li><p>基于 Row 复制只保存改变的列，降低硬盘、网络、内存等消耗。</p>
</li>
<li>支持把 Master 和 Slave 的相关信息记录在表中，原来是记录在文件里，记录在表里，增强可用性。</li>
<li>支持延时复制。</li>
</ul>
<p>GTID 的格式类似 server_uuid:id</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@server<span class="emphasis">_uuid;</span></span><br><span class="line"><span class="emphasis">+--------------------------------------+</span></span><br><span class="line"><span class="emphasis">| @@server_</span>uuid                        |</span><br><span class="line"><span class="code">+--------------------------------------+</span></span><br><span class="line">| fbf78286-701a-11e5-a88b-5b1557785233 |</span><br><span class="line"><span class="code">+--------------------------------------+</span></span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>该数据被写在 <code>DATADIR (/usr/local/mysql/data/auto.cnf)</code> 文件中，第一次启动的时候由 <code>generate_server_uuid</code> 函数生成。<br>id 是事务编号， server_uuid:id 共同组成了事务的唯一 ID，用来标示一个事务。<br>GTID 复制有着严格的限制，GTID 实例和非 GTID 实例是不能进行复制的。<br><a href="http://dev.mysql.com/doc/refman/5.6/en/replication-gtids.html" target="_blank" rel="noopener">GTID 官方文档</a> , <a href="http://mysql.taobao.org/index.php?title=MySQL%E5%86%85%E6%A0%B8%E6%9C%88%E6%8A%A5_2014.09&amp;oldid=848" target="_blank" rel="noopener">MySQL 内核月报参考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Memcached&quot;&gt;Memcached&lt;/h3&gt;&lt;p&gt;登陆 MySQL 查看插件目录，安装对应的配置数据表&lt;br&gt;&lt;figure class=&quot;highlight asciidoc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>将 API 从 yii1 迁移到 yii2</title>
    <link href="http://rust.love/2015/12/07/migrate_api_from_yii1_to_yii2/"/>
    <id>http://rust.love/2015/12/07/migrate_api_from_yii1_to_yii2/</id>
    <published>2015-12-07T02:39:19.000Z</published>
    <updated>2015-12-07T04:16:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>种种历史原因，导致无法使用使用严格的 RESTful 规则, 这里只是内部项目迁移过程中给大家普及的一点点小知识，因为是内部项目，对您可能并不通用。</p>
<h3 id="Yii2_basic_项目结构">Yii2 basic 项目结构</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── codeception.yml</span><br><span class="line">├── commands</span><br><span class="line">├── components</span><br><span class="line">├── composer.json</span><br><span class="line">├── composer.lock</span><br><span class="line">├── config</span><br><span class="line">├── controllers</span><br><span class="line">├── messages</span><br><span class="line">├── models</span><br><span class="line">├── runtime</span><br><span class="line">├── service</span><br><span class="line">├── tests</span><br><span class="line">├── vendor</span><br><span class="line">├── web</span><br><span class="line">├── yii</span><br><span class="line">└── yii.bat</span><br></pre></td></tr></table></figure>
<ul>
<li>API 规范</li>
<li>route</li>
<li>controllers</li>
<li>models</li>
<li>service</li>
<li>guzzlephp</li>
</ul>
<ol>
<li><p>API 简约规范<br>因为历史和现行的原因，不采用严格的 RESTful 定义的标准</p>
</li>
<li><p>route 映射规则</p>
</li>
</ol>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">'PUT <span class="doctag">&lt;controller&gt;</span>/<span class="doctag">&lt;id&gt;</span>'      =&gt; '<span class="doctag">&lt;controller&gt;</span>/update',</span></span><br><span class="line"><span class="comment">'DELETE <span class="doctag">&lt;controller&gt;</span>/<span class="doctag">&lt;id&gt;</span>'   =&gt; '<span class="doctag">&lt;controller&gt;</span>/delete',</span></span><br><span class="line"><span class="comment">'GET <span class="doctag">&lt;controller&gt;</span>/<span class="doctag">&lt;id&gt;</span>'      =&gt; '<span class="doctag">&lt;controller&gt;</span>/view',</span></span><br><span class="line"><span class="comment">'POST <span class="doctag">&lt;controller&gt;</span>'          =&gt; '<span class="doctag">&lt;controller&gt;</span>/create',</span></span><br><span class="line"><span class="comment">'GET <span class="doctag">&lt;controller&gt;</span>'           =&gt; '<span class="doctag">&lt;controller&gt;</span>/index',</span></span><br></pre></td></tr></table></figure>
<p>注: URL 驼峰式命名，需要用 - 分割，例如</p>
<figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">'GET</span> pointAccount' =&gt; <span class="symbol">'point</span>-account/index',</span><br></pre></td></tr></table></figure>
<p>新代码尽量不要采用这种风格，应该尽量采用单个英文名词。</p>
<ol>
<li>controllers 统一继承自 <code>MainController</code> 需要注意的几个方法</li>
</ol>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beforeAction</span><br><span class="line">afterAction</span><br><span class="line"></span><br><span class="line">getRawBody  -&gt; file_get_contents('php<span class="symbol">://input</span>')</span><br><span class="line">json</span><br><span class="line">renderJson</span><br></pre></td></tr></table></figure>
<ol>
<li>models 在项目中使用 <code>Model</code> 和 <code>ActiveRecord</code> , 当前项目相关的父类是 <code>MainModel</code> 和 <code>MainActiveRecord</code></li>
</ol>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">\a</span>pp<span class="symbol">\c</span>omponents<span class="symbol">\M</span>odelTrait</span><br><span class="line">Model </span><br><span class="line">ActiveRecord</span><br></pre></td></tr></table></figure>
<ol>
<li>Service 是复杂业务和公共业务逻辑的抽象，保证 Controller 简单，不同入口的相同业务统一。</li>
<li><p>Guzzlephp 一套特别好用的 Http Client ，告别自己封装 curl。</p>
</li>
<li><p>入参验证，有对应 db 的采用 <code>MainActiveRecord</code> 为父类，无 db 对应的采用 <code>MainModel</code> 为父类，通过统一的 <code>Validator</code> 和自定义验证规则来做入参校验，避免写各种 <code>if else empty isset</code> 等判断逻辑。</p>
</li>
<li><p>返回值问题</p>
</li>
</ol>
<ul>
<li>结构统一 {“status”: integer(), “message”: string(), “data”: []}</li>
<li>大小写永远保持一致</li>
<li>类型明确</li>
</ul>
<h3 id="Codeception_安装">Codeception 安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> composer global require <span class="string">"codeception/codeception=2.0.*"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> composer global require <span class="string">"codeception/specify=*"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> composer global require <span class="string">"codeception/verify=*"</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> composer global status</span></span><br><span class="line">Changed current directory to &lt;directory&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$&#123;PATH&#125;</span>:/&lt;directory&gt;/vendor/bin"</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> codecept -V</span></span><br><span class="line">Codeception version 2.0.16</span><br></pre></td></tr></table></figure>
<h3 id="Codeception_功能介绍">Codeception 功能介绍</h3><ul>
<li>Acceptance Testing 验收测试 (JS Ajax)</li>
<li>Functional Testing 功能测试 (No js)</li>
<li>API Testing </li>
<li>Unit Testing 单元测试</li>
</ul>
<ol>
<li>Acceptance Testing 验收测试 (JS Ajax)</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$I = <span class="keyword">new</span> AcceptanceTester($scenario);</span></span><br><span class="line"><span class="php">$I-&gt;amOnPage(<span class="string">'/'</span>);</span></span><br><span class="line"><span class="php">$I-&gt;click(<span class="string">'Sign Up'</span>);</span></span><br><span class="line"><span class="php">$I-&gt;submitForm(<span class="string">'#signup'</span>, <span class="keyword">array</span>(</span></span><br><span class="line"><span class="php">    <span class="string">'username'</span> =&gt; <span class="string">'MilesDavis'</span>, </span></span><br><span class="line"><span class="php">    <span class="string">'email'</span> =&gt; <span class="string">'miles@davis.com'</span></span></span><br><span class="line"><span class="php">));</span></span><br><span class="line"><span class="php">$I-&gt;see(<span class="string">'Thank you for Signing Up!'</span>);</span></span><br></pre></td></tr></table></figure>
<ol>
<li>Functional Testing 功能测试 (No js)</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$I = <span class="keyword">new</span> FunctionalTester($scenario);</span></span><br><span class="line"><span class="php">$I-&gt;amOnPage(<span class="string">'/'</span>);</span></span><br><span class="line"><span class="php">$I-&gt;click(<span class="string">'Sign Up'</span>);</span></span><br><span class="line"><span class="php">$I-&gt;submitForm(<span class="string">'#signup'</span>, <span class="keyword">array</span>(</span></span><br><span class="line"><span class="php">    <span class="string">'username'</span> =&gt; <span class="string">'MilesDavis'</span>, </span></span><br><span class="line"><span class="php">    <span class="string">'email'</span> =&gt; <span class="string">'miles@davis.com'</span>));</span></span><br><span class="line"><span class="php">$I-&gt;see(<span class="string">'Thank you for Signing Up!'</span>);</span></span><br><span class="line"><span class="php">$I-&gt;seeEmailSent(<span class="string">'miles@davis.com'</span>, <span class="string">'Thank you for registration'</span>);</span></span><br><span class="line"><span class="php">$I-&gt;seeInDatabase(<span class="string">'users'</span>, <span class="keyword">array</span>(<span class="string">'email'</span> =&gt; <span class="string">'miles@davis.com'</span>));</span></span><br></pre></td></tr></table></figure>
<ol>
<li>API Testing</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$I = <span class="keyword">new</span> ApiTester($scenario);</span></span><br><span class="line"><span class="php">$I-&gt;wantTo(<span class="string">'create a new user by API'</span>);</span></span><br><span class="line"><span class="php">$I-&gt;amHttpAuthenticated(<span class="string">'davert'</span>,<span class="string">'123456'</span>);</span></span><br><span class="line"><span class="php">$I-&gt;haveHttpHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span></span><br><span class="line"><span class="php">$I-&gt;sendPOST(<span class="string">'/users'</span>, <span class="keyword">array</span>(<span class="string">'name'</span> =&gt; <span class="string">'davert'</span> ));</span></span><br><span class="line"><span class="php">$I-&gt;seeResponseCodeIs(<span class="number">200</span>);</span></span><br><span class="line"><span class="php">$I-&gt;seeResponseIsJson();</span></span><br><span class="line"><span class="php">$I-&gt;seeResponseContainsJson(<span class="keyword">array</span>(<span class="string">'result'</span> =&gt; <span class="string">'ok'</span>));</span></span><br></pre></td></tr></table></figure>
<ol>
<li>Unit Testing 单元测试</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> \<span class="title">Codeception</span>\<span class="title">Util</span>\<span class="title">Stub</span>;</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> <span class="keyword">extends</span> \<span class="title">Codeception</span>\<span class="title">TestCase</span>\<span class="title">Test</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testUserSave</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">        $user = Stub::make(<span class="string">'User'</span>);</span></span><br><span class="line"><span class="php">        $user-&gt;setName(<span class="string">'davert'</span>);</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;assertEquals(<span class="string">'davert'</span>, $user-&gt;getName());</span></span><br><span class="line"><span class="php">        $user-&gt;save();</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;tester-&gt;seeInDatabase(<span class="string">'users'</span>, <span class="keyword">array</span>(<span class="string">'name'</span> =&gt; <span class="string">'davert'</span>));</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;种种历史原因，导致无法使用使用严格的 RESTful 规则, 这里只是内部项目迁移过程中给大家普及的一点点小知识，因为是内部项目，对您可能并不通用。&lt;/p&gt;
&lt;h3 id=&quot;Yii2_basic_项目结构&quot;&gt;Yii2 basic 项目结构&lt;/h3&gt;&lt;figure class
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Codeception API testing</title>
    <link href="http://rust.love/2015/12/04/php_codexception_api_testing/"/>
    <id>http://rust.love/2015/12/04/php_codexception_api_testing/</id>
    <published>2015-12-04T02:45:30.000Z</published>
    <updated>2015-12-04T03:06:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个比较惭愧的事情是做开发这么久了，却很少写测试（单元、集成测试等）。每当项目要求写单元测试的时候，我的内心基本是抵制的，基本上程序都自测通过以后都能正常上线，bug 数量也很低 :) 。</p>
<p>因为最近为了规范项目，保证项目质量，需要写一些测试，看到了 codeception 这个全栈的测试框架非常欣喜，强大、易用。由于 composer 的介入，也让安装变得各种容易（网络环境就不说了）。</p>
<p>关于 codeception 的功能就不多介绍了，相关的功能看<a href="http://x.21fcloud.com.cn/2015/02/03/%E4%B8%80%E4%B8%AA%E5%85%A8%E5%A0%86%E6%A0%88%E7%9A%84-php-%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94codeception/" target="_blank" rel="noopener">这篇文章</a> 里面唯独对 API testing 说的比较简单，我这里简单的说下 API testing 的使用。（假设 codeception 已经安装好）</p>
<p>简易的项目目录<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www</span><br><span class="line"><span class="string">|--tests</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd www</span><br><span class="line">codecept bootstrap</span><br><span class="line">codecept <span class="keyword">generate</span>:suite api</span><br><span class="line">codecept <span class="keyword">generate</span>:cept api User</span><br></pre></td></tr></table></figure>
<p>经过上面的操作以后，在 tests 目录下已经有了很多文件了，其中会有一些 api 相关的文件。</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat api.suite.yml </span><br><span class="line"><span class="meta"># 配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">class_name:</span> ApiTester</span><br><span class="line"><span class="symbol">modules:</span></span><br><span class="line"><span class="symbol">    enabled:</span> [ApiHelper, PhpBrowser]</span><br><span class="line"><span class="symbol">    config:</span></span><br><span class="line"><span class="symbol">        PhpBrowser:</span></span><br><span class="line"><span class="symbol">            url:</span> http:<span class="comment">//httpbin.org</span></span><br></pre></td></tr></table></figure>
<p>此时的目录信息，还有一些省略的文件</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">www</span><br><span class="line"><span class="string">|--tests</span></span><br><span class="line"><span class="string">|----api</span></span><br><span class="line"><span class="string">|------_bootstrap.php</span></span><br><span class="line"><span class="string">|------UserCept.php</span></span><br></pre></td></tr></table></figure>
<p>编写 UserCept.php 来进行简单的测试<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat UserCept.php</span><br><span class="line"></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$I = <span class="keyword">new</span> ApiTester($scenario);</span></span><br><span class="line"><span class="php">$I-&gt;wantTo(<span class="string">'see my ip'</span>);</span></span><br><span class="line"><span class="php">$I-&gt;amOnPage(<span class="string">'/ip'</span>);</span></span><br><span class="line"><span class="php">$I-&gt;seeResponseCodeIs(<span class="number">200</span>);</span></span><br><span class="line"><span class="php">$I-&gt;see(<span class="string">'origin'</span>);</span></span><br></pre></td></tr></table></figure></p>
<p>运行和查看测试结果<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd www</span><br><span class="line">codecept build</span><br><span class="line">codecept <span class="keyword">run</span><span class="bash"> api -v</span></span><br></pre></td></tr></table></figure></p>
<p>运行之后会看到一些结果信息。相关的 codeception 的内置函数等请浏览相关的文档，一个简单的 api 测试编写完了。</p>
<p>eof;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个比较惭愧的事情是做开发这么久了，却很少写测试（单元、集成测试等）。每当项目要求写单元测试的时候，我的内心基本是抵制的，基本上程序都自测通过以后都能正常上线，bug 数量也很低 :) 。&lt;/p&gt;
&lt;p&gt;因为最近为了规范项目，保证项目质量，需要写一些测试，看到了 codec
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git 修复 bug 的基本流程</title>
    <link href="http://rust.love/2015/12/01/git_fix_bug_flow/"/>
    <id>http://rust.love/2015/12/01/git_fix_bug_flow/</id>
    <published>2015-12-01T01:08:19.000Z</published>
    <updated>2015-12-01T02:33:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 git 进行代码版本管理的过程中，经常发现在需要修复突发性 bug 的时候，很多初学者总是采用很粗暴或者说并不太友好的方式进行操作，不但操作方式别扭，而且还容易导致代码混乱。下面简单的说下一般 bug 的修复操作方式。</p>
<p>例如有分支若干<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">master</span></span><br><span class="line">develop</span><br><span class="line">lixx</span><br><span class="line">wangxx</span><br><span class="line">zhaoxx</span><br></pre></td></tr></table></figure></p>
<p><code>lixx wangxx zhaoxx</code> 这些分支都是具体开发者的分支，<code>develop</code> 保持最新，<code>master</code> 为发布的版本, 目前需要在 <code>master</code> 上修复一个 bug，操作流程如下：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git co -b fix_888 &lt;master <span class="keyword">last</span> hash <span class="built_in">id</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>在 master 分支上，基于最新的 hash id 创建一个分支 fix_888 ，此时在 fix_888 上修复代码，之后合并到 master ，而其它分支也可能需要合并这部分代码，而其它分支的代码已经远远的超过了 fix_888 这个节点，直接 <code>git merge</code> 是行不通的，此时需要<code>git cherry-pick</code> 处理可能比较方便一点。因为其它分支已经远远的超过的 fix_888 ，所以<code>cherry-pick</code>以后也可能是会出现冲突的，这个时候解决冲突再次提交合并到develop.</p>
<p>大体的一个过程是<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git co <span class="keyword">master</span> <span class="title">// 切换到 master</span> 分支</span><br><span class="line">git co -b fix_888 <span class="tag">&lt;master last hash id&gt;</span> // 基于 <span class="keyword">master</span> <span class="title">分支的最新hash</span> id 创建分支</span><br><span class="line">// 此时 fix some code 并且提交</span><br><span class="line">git co <span class="literal">master</span></span><br><span class="line">git merge fix_888</span><br><span class="line">// <span class="keyword">master</span> <span class="title">代码修复结束了</span></span><br><span class="line"><span class="title">git</span> co develop </span><br><span class="line">git cherry-pick <span class="tag">&lt;fix_888 commit hash id&gt;</span> // 将 fix_888 提交的代码用到 develop 分支</span><br><span class="line">// 如果有冲突修复，没有直接 push</span><br><span class="line">// 其它开发人员从 develop 拉最新的代码即可。</span><br></pre></td></tr></table></figure></p>
<p>以上有些命令是可以省略的，或者可以有更加优化的流程可以选择，git 功能强大，还有很多功能需要探索，若您有更好的方式，求指导。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 git 进行代码版本管理的过程中，经常发现在需要修复突发性 bug 的时候，很多初学者总是采用很粗暴或者说并不太友好的方式进行操作，不但操作方式别扭，而且还容易导致代码混乱。下面简单的说下一般 bug 的修复操作方式。&lt;/p&gt;
&lt;p&gt;例如有分支若干&lt;br&gt;&lt;figu
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php 在 fpm 下生成随机数研究</title>
    <link href="http://rust.love/2015/11/18/php_mt_rand_numbers/"/>
    <id>http://rust.love/2015/11/18/php_mt_rand_numbers/</id>
    <published>2015-11-18T06:47:16.000Z</published>
    <updated>2015-11-18T07:49:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>下面这段代码，在 fpm 下，交替打开注释 [1] 和 [2] ，你会发现多次请求随机数相同的现象。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> str_repeat(<span class="string">"="</span>, <span class="number">100</span>), <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> getmypid(), <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> str_repeat(<span class="string">"="</span>, <span class="number">100</span>), <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="comment">// [1] mt_srand(10);</span></span><br><span class="line"><span class="comment">// [2] mt_srand();</span></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">10</span>; $i ++) &#123; */</span><br><span class="line">     <span class="keyword">echo</span> mt_rand(<span class="number">1000</span>, <span class="number">9999</span>), <span class="string">'&lt;br&gt;'</span>; */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>带着这个疑问，我探寻了一下源代码，最后大体上整理了一个源码的流程出来<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define N             MT_N                 /* length of state vector MT_N = 624*/ </span></span><br><span class="line"><span class="comment">#define M             (397)                /* a period parameter */</span></span><br><span class="line"><span class="comment">#define hiBit(u)      ((u) &amp; 0x80000000U)  /* mask all but highest   bit of u */</span></span><br><span class="line"><span class="comment">#define loBit(u)      ((u) &amp; 0x00000001U)  /* mask all but lowest    bit of u */</span></span><br><span class="line"><span class="comment">#define loBits(u)     ((u) &amp; 0x7FFFFFFFU)  /* mask     the highest   bit of u */</span></span><br><span class="line"><span class="comment">#define mixBits(u, v) (hiBit(u)|loBits(v)) /* move hi bit of u to hi bit of v */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define twist(m,u,v)  (m ^ (mixBits(u,v)&gt;&gt;1) ^ ((php_uint32)(-(php_int32)(loBit(u))) &amp; 0x9908b0dfU))</span></span><br><span class="line"></span><br><span class="line">PHP_FUNCTION(mt_rand) &#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    if (!BG(mt_rand_is_seeded)) &#123;</span><br><span class="line">        php_mt_srand(GENERATE_SEED() TSRMLS_CC);</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PHP_FUNCTION(mt_srand)</span><br><span class="line">&#123;</span><br><span class="line">    long seed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, <span class="string">"|l"</span>, &amp;seed) == FAILURE)</span><br><span class="line">        return;</span><br><span class="line"></span><br><span class="line">    if (ZEND_NUM_ARGS() == <span class="number">0</span>)</span><br><span class="line">        seed = GENERATE_SEED();</span><br><span class="line"></span><br><span class="line">    php_mt_srand(seed TSRMLS_CC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PHPAPI void php_mt_srand(php_uint32 seed TSRMLS_DC)</span><br><span class="line">&#123;</span><br><span class="line">    /* Seed the generator with a simple uint32 */</span><br><span class="line">    php_mt_initialize(seed, BG(<span class="keyword">state</span>));</span><br><span class="line">    php_mt_reload(TSRMLS_C);</span><br><span class="line"></span><br><span class="line">    /* Seed only <span class="keyword">once</span> */</span><br><span class="line">    BG(mt_rand_is_seeded) = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static inline void php_mt_initialize(php_uint32 seed, php_uint32 *<span class="keyword">state</span>)</span><br><span class="line">&#123;</span><br><span class="line">    /* Initialize generator <span class="keyword">state</span> with seed</span><br><span class="line">       See Knuth TAOCP Vol <span class="number">2</span>, <span class="number">3</span>rd Ed, p.<span class="number">106</span> <span class="keyword">for</span> multiplier.</span><br><span class="line">       In previous versions, most significant bits (MSBs) of the seed affect</span><br><span class="line">       only MSBs of the <span class="keyword">state</span> array.  Modified <span class="number">9</span> Jan <span class="number">2002</span> by Makoto Matsumoto. */</span><br><span class="line"></span><br><span class="line">    register php_uint32 *s = <span class="keyword">state</span>;</span><br><span class="line">    register php_uint32 *r = <span class="keyword">state</span>;</span><br><span class="line">    register int i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    *s++ = seed &amp; <span class="number">0</span>xffffffffU;</span><br><span class="line">    <span class="keyword">for</span>( ; i <span class="variable">&lt; N; ++i ) &#123;</span></span><br><span class="line"><span class="variable">        *s++ = ( 1812433253U * ( *r ^ (*r &gt;</span>&gt; <span class="number">30</span>) ) + i ) &amp; <span class="number">0</span>xffffffffU;</span><br><span class="line">        r++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static inline void php_mt_reload(TSRMLS_D)</span><br><span class="line">&#123;</span><br><span class="line">    /* Generate N new values <span class="keyword">in</span> <span class="keyword">state</span></span><br><span class="line">       Made clearer and faster by Matthew Bellew (matthew.bellew@home.com) */</span><br><span class="line"></span><br><span class="line">    register php_uint32 *<span class="keyword">state</span> = BG(<span class="keyword">state</span>);</span><br><span class="line">    register php_uint32 *p = <span class="keyword">state</span>;</span><br><span class="line">    register int i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = N - M; i--; ++p)</span><br><span class="line">        *p = twist(p[M], p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (i = M; --i; ++p)</span><br><span class="line">        *p = twist(p[M-N], p[<span class="number">0</span>], p[<span class="number">1</span>]);</span><br><span class="line">    *p = twist(p[M-N], p[<span class="number">0</span>], <span class="keyword">state</span>[<span class="number">0</span>]);</span><br><span class="line">    BG(left) = N;</span><br><span class="line">    BG(next) = <span class="keyword">state</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过代码可以看出， <code>mt_rand</code> 和 <code>mt_srand</code> 其实没有明显的差别，无非是 <code>seed</code> 的处理上有一些差别。而存储随机数相关的数据结构在一个叫 <code>_php_basic_globals</code> 的结构体里，代码如下（摘抄了部分）：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* rand.c */</span><br><span class="line">php_uint32   <span class="keyword">state</span>[MT_N+<span class="number">1</span>];  /* <span class="keyword">state</span> vector + <span class="number">1</span> extra <span class="keyword">to</span> not violate ANSI C */</span><br><span class="line">php_uint32   *next;       /* next <span class="keyword">random</span> value is computed <span class="keyword">from</span> here */</span><br><span class="line">int      left;        /* can *next++ this many times before reloading */</span><br><span class="line"></span><br><span class="line">unsigned int rand_seed; /* Seed <span class="keyword">for</span> rand(), <span class="keyword">in</span> ts version */</span><br><span class="line"></span><br><span class="line">zend_bool rand_is_seeded; /* Whether rand() has been seeded */</span><br><span class="line">zend_bool mt_rand_is_seeded; /* Whether mt_rand() has been seeded */</span><br></pre></td></tr></table></figure></p>
<p>通过上面的结构体，我们看到了一些状态等信息，上面的这些代码主要展示了生成随机数的一些关键环节。下面我们说一说产生随机数不随机相关情况：</p>
<ol>
<li>先全部重启 php-fpm</li>
<li><p>第一个实验，在调用 mt_rand(1000, 9999) 之前，调用 mt_srand(10)，此时所有请求的随机数相同，这个没有问题。</p>
</li>
<li><p>去掉 mt_srand(10)，如果你fpm fork 了3个进程，那么根据pid查看这三个进程的随机数都是相同的，这三个进程执行一轮以后，就会生成新的随机数。</p>
</li>
<li>把 mt_srand(10) 换成 mt_srand() 恢复了正确的随机数</li>
<li>再进行第1步操作后，只调用 mt_rand(1000, 9999) 一切正常</li>
</ol>
<p>那么为什么 mt_srand(seed) 以后，就出现不随机的状况了呢？<br>因为fork出来的进程，当我们mt_srand(seed) 以后，进程所共享的 seed 是一样的，所以不同进程生成的随机数才是一样的。而 mt_srand() 这种调用，系统是根据GENERATE_SEED()来生成的seed，这个seed是包含了一些pid等其他信息，所以每个进程的seed是不同的，最后生成的随机数也是不同的。<br>下面是 GENERATE_SEED() 的定义：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#ifdef PHP_WIN32</span><br><span class="line">#define GENERATE_SEED() (((<span class="name">long</span>) (<span class="name">time</span>(<span class="number">0</span>) * GetCurrentProcessId())) ^ ((long) (1000000.0 * php_combined_lcg(<span class="name">TSRMLS_C</span>))))</span><br><span class="line">#else</span><br><span class="line">#define GENERATE_SEED() (((<span class="name">long</span>) (<span class="name">time</span>(<span class="number">0</span>) * getpid())) ^ ((long) (1000000.0 * php_combined_lcg(<span class="name">TSRMLS_C</span>))))</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></p>
<p>最后的代码是一个简单的扩展函数，输出执行<code>test_mt_rand</code>过程中内核的一些相关数据，php版本5.5.30<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">PHP_FUNCTION(test_mt_rand)</span><br><span class="line">&#123;</span><br><span class="line">	long min<span class="comment">;</span></span><br><span class="line">	long max<span class="comment">;</span></span><br><span class="line">	long number<span class="comment">;</span></span><br><span class="line">	int  argc = ZEND_NUM_ARGS()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">	if (argc != <span class="number">0</span>) &#123;</span><br><span class="line">		if (zend_parse_parameters(argc TSRMLS_CC, <span class="string">"ll"</span>, &amp;min, &amp;max) == FAILURE) &#123;</span><br><span class="line">			return<span class="comment">;</span></span><br><span class="line">		&#125; else if (max &lt; min) &#123;</span><br><span class="line">			php_error_docref(NULL TSRMLS_CC, E_WARNING, <span class="string">"max(%ld) is smaller than min(%ld)"</span>, max, min)<span class="comment">;</span></span><br><span class="line">			RETURN_FALSE<span class="comment">;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	zval *opt_array<span class="comment">;</span></span><br><span class="line">	MAKE_STD_ZVAL(opt_array)<span class="comment">;	</span></span><br><span class="line">	array_init(opt_array)<span class="comment">;</span></span><br><span class="line">	<span class="keyword">add_assoc_long(opt_array, </span><span class="string">"MIN"</span>, min)<span class="comment">;</span></span><br><span class="line">	<span class="keyword">add_assoc_long(opt_array, </span><span class="string">"MAX"</span>, max)<span class="comment">;</span></span><br><span class="line">	<span class="keyword">add_assoc_long(opt_array, </span><span class="string">"NUMBER0"</span>, number)<span class="comment">;</span></span><br><span class="line">	<span class="keyword">add_assoc_long(opt_array, </span><span class="string">"BG_SEEDED"</span>, <span class="keyword">BG(mt_rand_is_seeded));</span></span><br><span class="line"><span class="keyword">	</span><span class="keyword">add_assoc_long(opt_array, </span><span class="string">"GEN_SEED"</span>, GENERATE_SEED())<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">	if (!<span class="keyword">BG(mt_rand_is_seeded)) </span>&#123;</span><br><span class="line">		php_mt_srand(GENERATE_SEED() TSRMLS_CC)<span class="comment">;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * Melo: hmms.. randomMT() returns 32 random bits...</span></span><br><span class="line"><span class="comment">	 * Yet, the previous php_rand only returns 31 at most.</span></span><br><span class="line"><span class="comment">	 * So I put a right shift to loose the lsb. It *seems*</span></span><br><span class="line"><span class="comment">	 * better than clearing the msb. </span></span><br><span class="line"><span class="comment">	 * Update: </span></span><br><span class="line"><span class="comment">	 * I talked with Cokus via email and it won't ruin the algorithm</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	int index = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">	php_uint32 *st= <span class="keyword">BG(state);	</span></span><br><span class="line"></span><br><span class="line">	zval *<span class="keyword">subArr;</span></span><br><span class="line"><span class="keyword">	</span>MAKE_STD_ZVAL(<span class="keyword">subArr);</span></span><br><span class="line"><span class="keyword">	</span>array_init(<span class="keyword">subArr);</span></span><br><span class="line"><span class="keyword">	</span>for (index = <span class="number">0</span><span class="comment">; index &lt; MT_N; index ++) &#123;</span></span><br><span class="line">		<span class="keyword">add_index_long(subArr, </span>index, *st++)<span class="comment">;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">add_assoc_zval(opt_array, </span><span class="string">"state1"</span>, <span class="keyword">subArr);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">	</span><span class="keyword">add_assoc_long(opt_array, </span><span class="string">"BG(next)"</span>, *<span class="keyword">BG(next));</span></span><br><span class="line"><span class="keyword">	</span>number = (long) (php_mt_rand(TSRMLS_C) &gt;&gt; <span class="number">1</span>)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">	php_uint32 *st1 = <span class="keyword">BG(state);</span></span><br><span class="line"><span class="keyword">	</span>zval *<span class="keyword">subArr1;</span></span><br><span class="line"><span class="keyword">	</span>MAKE_STD_ZVAL(<span class="keyword">subArr1);</span></span><br><span class="line"><span class="keyword">	</span>array_init(<span class="keyword">subArr1);</span></span><br><span class="line"><span class="keyword">	</span>for (index = <span class="number">0</span><span class="comment">; index &lt; MT_N; index ++) &#123;</span></span><br><span class="line">		<span class="keyword">add_index_long(subArr1, </span>index, *st1 ++)<span class="comment">;	</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">add_assoc_zval(opt_array, </span><span class="string">"state2"</span>, <span class="keyword">subArr1);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">	</span><span class="keyword">add_assoc_long(opt_array, </span><span class="string">"NUMBER_php_mt_rand"</span>, number)<span class="comment">;</span></span><br><span class="line">	if (argc == <span class="number">2</span>) &#123;</span><br><span class="line">		RAND_RANGE(number, min, max, PHP_MT_RAND_MAX)<span class="comment">;</span></span><br><span class="line">		<span class="keyword">add_assoc_long(opt_array, </span><span class="string">"PHP_MT_RAND_MAX"</span>, PHP_MT_RAND_MAX)<span class="comment">;</span></span><br><span class="line">		<span class="keyword">add_assoc_long(opt_array, </span><span class="string">"RETURN"</span>, number)<span class="comment">;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">add_assoc_long(opt_array, </span><span class="string">"SEED"</span>, <span class="keyword">BG(rand_seed));</span></span><br><span class="line"><span class="keyword">	</span><span class="keyword">add_assoc_long(opt_array, </span><span class="string">"LEFT"</span>, <span class="keyword">BG(left));</span></span><br><span class="line"><span class="keyword">	</span>RETURN_ZVAL(opt_array, <span class="number">1</span>, <span class="number">0</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面这段代码，在 fpm 下，交替打开注释 [1] 和 [2] ，你会发现多次请求随机数相同的现象。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>replace system&#39;s vim with brew install</title>
    <link href="http://rust.love/2015/11/12/brew_install_vim_replace_system_vim/"/>
    <id>http://rust.love/2015/11/12/brew_install_vim_replace_system_vim/</id>
    <published>2015-11-12T01:08:10.000Z</published>
    <updated>2015-11-12T01:08:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>brew update</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install macvim --<span class="keyword">with</span>-<span class="keyword">override</span>-system-vim</span><br></pre></td></tr></table></figure>
<p>upgrade</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew<span class="built_in"> upgrade </span>macvim --with-override-system-vim</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;brew update&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td c
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php 和 java 之间 RSA 加密互通问题</title>
    <link href="http://rust.love/2015/10/27/php_java_rsa_crypt_pkcs8/"/>
    <id>http://rust.love/2015/10/27/php_java_rsa_crypt_pkcs8/</id>
    <published>2015-10-27T07:35:51.000Z</published>
    <updated>2015-10-28T02:12:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://rust.love/2015/10/26/php_java_rsa_crypt/">前一篇</a>主要是简单的实现了 php 的加密和解密问题，只是对秘钥格式的处理。这篇主要说我遇到的问题，java 加密以后，php 没办法解密，代码如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">decryptPrivate</span><span class="params">($data, $rsakeypath)</span> </span>&#123;</span><br><span class="line">    $content = <span class="keyword">self</span>::getContent($rsakeypath);    </span><br><span class="line">    <span class="keyword">if</span> ($content) &#123;</span><br><span class="line">        $pem = <span class="keyword">self</span>::transJavaRsaKeyToPhpOpenSSL($content);</span><br><span class="line">        $pem = <span class="keyword">self</span>::appendFlags($pem, <span class="keyword">false</span>);</span><br><span class="line">        $res = openssl_pkey_get_private($pem);</span><br><span class="line">        <span class="keyword">if</span> ($res) &#123;</span><br><span class="line">            $opt = openssl_private_decrypt($data, $result, $res);</span><br><span class="line">            <span class="keyword">if</span> ($opt) &#123;</span><br><span class="line">                <span class="keyword">return</span> $result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也就是说 <code>$res</code> 这个返回是正确的，而<code>openssl_private_decrypt</code> 这个函数解密失败，下面先看看 java 的部分代码</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">String</span> getAligorithm()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="string">"RSA"</span>; <span class="comment">// must be RSA/ECB/PKCS1Padding ? why ?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> encrypty(<span class="keyword">String</span> src)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">if</span> (<span class="keyword">this</span>.encrypt != null)</span><br><span class="line">        src = <span class="keyword">this</span>.encrypt.encrypty(src);</span><br><span class="line">    <span class="built_in">try</span> &#123;</span><br><span class="line">        Cipher cipher = Cipher.getInstance(getAligorithm());</span><br><span class="line">        cipher.init(<span class="number">1</span>, <span class="built_in">getKey</span>(Base64.decodeBase64(<span class="keyword">this</span>.sKey.getBytes())));</span><br><span class="line">        <span class="keyword">byte</span>[] clearData = src.getBytes(<span class="keyword">this</span>.encoding);</span><br><span class="line">        <span class="keyword">byte</span>[] secData = <span class="keyword">new</span> <span class="keyword">byte</span>[((clearData.length - <span class="number">1</span>) / <span class="number">117</span> + <span class="number">1</span>) * <span class="number">128</span>];</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">for</span> (; clearData.length - m &gt; <span class="number">117</span>; m += <span class="number">117</span>)</span><br><span class="line">            n += cipher.doFinal(clearData, m, <span class="number">117</span>, secData, n);</span><br><span class="line">        cipher.doFinal(clearData, m, clearData.length - m, secData, n);</span><br><span class="line">        <span class="built_in">return</span> <span class="keyword">new</span> <span class="keyword">String</span>(Base64.encodeBase64(secData));</span><br><span class="line">    &#125; <span class="built_in">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> EncryptyException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面 java 代码的 <code>getAligorithm()</code> 这个方法，返回了 “RSA” ，查阅了很多的资料，显示他是失败之源，需要改成 <code>RSA/ECB/PCKS1Padding</code> ，因为 jar 包是第三方合作项目，所以这里也只能是反编译来查看代码，没有办法在原来的代码基础上进行修改，为什么需要改成 <code>RSA/ECB/PCKS1Padding</code> 我还不清楚，也没有从官方文档查到相关说明，唯一网上的解释是 如果用php解密必须这样设置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://rust.love/2015/10/26/php_java_rsa_crypt/&quot;&gt;前一篇&lt;/a&gt;主要是简单的实现了 php 的加密和解密问题，只是对秘钥格式的处理。这篇主要说我遇到的问题，java 加密以后，php 没办法解密，代码如下：&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php 和 java RSA 对称加密互通的问题</title>
    <link href="http://rust.love/2015/10/26/php_java_rsa_crypt/"/>
    <id>http://rust.love/2015/10/26/php_java_rsa_crypt/</id>
    <published>2015-10-26T04:32:05.000Z</published>
    <updated>2015-10-27T07:33:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>java 和 php 在处理 RSA 加密的时候是有差别的，java 处理的 public/private key 文件在 php 里面是没有办法处理的，需要进行格式转换，而通过 openssl 直接生成的 public/private key 文件在 java 里面是不能直接实用的，所以如果双方互通就涉及到格式转换的问题。而往往因为不用业务之间需要这种语言上的加密转换，如果不知道这种差异，总是无法得到正确的结果。</p>
<p>一般通过两个函数就可以判断你的 key 格式是否是你可以处理的:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl_pkey_get_public</span><br><span class="line">openssl_pkey_get_private</span><br></pre></td></tr></table></figure>
<p>如果这两个函数返回的是 false ，则你的 key 格式就是 php 处理不了的。</p>
<p>举个例子：某平台的接口发给你了一个 public key ，你通过 public key 对数据进行加密传输到该平台，该平台通过 private key 对你传输的数据进行解密，而对方平台用的是 java 语言，刚好给你的 public key 格式也是 java 可以处理的，而你方的编程语言为 php ，此时就需要处理，代码如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RsaCrypt</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * encrypt with public key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $data;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $rsakeypath</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">encryptPublic</span><span class="params">($data, $rsakeypath)</span> </span>&#123;</span><br><span class="line">        $content = <span class="keyword">self</span>::getContent($rsakeypath); </span><br><span class="line">        <span class="keyword">if</span> ($content) &#123;</span><br><span class="line">            $pem = <span class="keyword">self</span>::transJavaRsaKeyToPhpOpenSSL($content);</span><br><span class="line">            $pem = <span class="keyword">self</span>::appendFlags($pem, <span class="keyword">true</span>);</span><br><span class="line">            $res = openssl_pkey_get_public($pem); </span><br><span class="line">            <span class="keyword">if</span> ($res) &#123;</span><br><span class="line">                $opt = openssl_public_encrypt($data, $result, $res);</span><br><span class="line">                <span class="keyword">if</span> ($opt) &#123;</span><br><span class="line">                    <span class="keyword">return</span> $result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * decrypt with private key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $rsakeypath</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">decryptPrivate</span><span class="params">($data, $rsakeypath)</span> </span>&#123;</span><br><span class="line">        $content = <span class="keyword">self</span>::getContent($rsakeypath);    </span><br><span class="line">        <span class="keyword">if</span> ($content) &#123;</span><br><span class="line">            $pem = <span class="keyword">self</span>::transJavaRsaKeyToPhpOpenSSL($content);</span><br><span class="line">            $pem = <span class="keyword">self</span>::appendFlags($pem, <span class="keyword">false</span>);</span><br><span class="line">            $res = openssl_pkey_get_private($pem);</span><br><span class="line">            <span class="keyword">if</span> ($res) &#123;</span><br><span class="line">                $opt = openssl_private_decrypt($data, $result, $res);</span><br><span class="line">                <span class="keyword">if</span> ($opt) &#123;</span><br><span class="line">                    <span class="keyword">return</span> $result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get content forom file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $filepath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $content</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getContent</span><span class="params">($filepath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_file($filepath)) &#123;</span><br><span class="line">            $content = file_get_contents($filepath);</span><br><span class="line">            <span class="keyword">return</span> strtr($content, <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">"\r\n"</span> =&gt; <span class="string">""</span>,</span><br><span class="line">                <span class="string">"\r"</span> =&gt; <span class="string">""</span>,</span><br><span class="line">                <span class="string">"\n"</span> =&gt; <span class="string">""</span>,</span><br><span class="line">            ));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * trans java's rsa key format to php openssl can read</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">transJavaRsaKeyToPhpOpenSSL</span><span class="params">($content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($content) &#123;</span><br><span class="line">            <span class="keyword">return</span> trim(chunk_split($content, <span class="number">64</span>, <span class="string">"\n"</span>));</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * append Falgs to content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $isPublic</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">appendFlags</span><span class="params">($content, $isPublic = true)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($isPublic) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"-----BEGIN PUBLIC KEY-----\n"</span> . $content . <span class="string">"\n-----END PUBLIC KEY-----\n"</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"-----BEGIN PRIVATE KEY-----\n"</span> . $content . <span class="string">"\n-----END PRIVATE KEY-----\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这段代码主要完成了 public key 加密和 private key 解密两个方法。有时候我们还需要 public key 解密和 private key 加密，相关的函数在 openssl 的扩展模块都可以找到。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openssl_public_decrypt</span><br><span class="line">openssl_public_encrypt</span><br><span class="line">openssl_private_decrypt</span><br><span class="line">openssl_private_encrypt</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java 和 php 在处理 RSA 加密的时候是有差别的，java 处理的 public/private key 文件在 php 里面是没有办法处理的，需要进行格式转换，而通过 openssl 直接生成的 public/private key 文件在 java 里面是不能
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的工具包</title>
    <link href="http://rust.love/2015/10/22/my_tools/"/>
    <id>http://rust.love/2015/10/22/my_tools/</id>
    <published>2015-10-22T03:56:02.000Z</published>
    <updated>2015-10-22T04:15:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>每当被叫去帮别人解决问题的时候，看着他那未设置过的字体、未配置过的配色主题再加上系统自带那些别扭的工具，我就有种先帮他搞定开发环境和工具的冲动。</p>
<p>简单说说我使用的软件和各种小工具吧</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim</span><br><span class="line">item2</span><br><span class="line">oh my <span class="keyword">shell</span><span class="bash"></span></span><br><span class="line"><span class="bash">tmux</span></span><br><span class="line"><span class="bash">git</span></span><br><span class="line"><span class="bash">brew</span></span><br><span class="line"><span class="bash">proxychains-ng</span></span><br><span class="line"><span class="bash">Dash</span></span><br><span class="line"><span class="bash">Sequel Pro</span></span><br></pre></td></tr></table></figure>
<p>因为大部分是脚本语言开发，所以以上这些基本就都能满足日常需求了，vim 集成了各种插件，能达到一般 IDE 的级别了。<br>item2 则更多的时候是为了方便粘贴复制分屏等功能，因为 tmux 已经具备了分屏功能，所以 item2 的分屏我还不怎么使用。<br>oh my shell 功能非常强大。<br>tmux 就更不用说了，使用 screen 的可以考虑切换到 tmux。<br>git 版本管理利器。<br>brew Mac 下管理各种软件安装包的利器。<br>proxychains-ng 为了命令行下方便的使用一些代理，你懂的。<br>Dash 各种帮助文档的集合。<br>Sequel Pro MySql GUI 客户端管理工具。</p>
<p>而像 vim item2 tmux 这些可以设置配色主题的我基本都采用了 Solarized Dark 主题。<br>vim 的各种插件和配置来自 <a href="https://github.com/amix/vimrc" target="_blank" rel="noopener">https://github.com/amix/vimrc</a></p>
<p>ssh 链接服务器相关的主要是写了一些 expect 脚本。</p>
<p>–EOF;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每当被叫去帮别人解决问题的时候，看着他那未设置过的字体、未配置过的配色主题再加上系统自带那些别扭的工具，我就有种先帮他搞定开发环境和工具的冲动。&lt;/p&gt;
&lt;p&gt;简单说说我使用的软件和各种小工具吧&lt;/p&gt;
&lt;figure class=&quot;highlight dockerfile
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php 安装 memcached 扩展出现 zlib 错误</title>
    <link href="http://rust.love/2015/10/21/php_install_memcached_error_zlib/"/>
    <id>http://rust.love/2015/10/21/php_install_memcached_error_zlib/</id>
    <published>2015-10-21T05:24:50.000Z</published>
    <updated>2015-10-21T05:24:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Mac OS X 10.11 中通过 </p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>php55-memcached</span><br></pre></td></tr></table></figure>
<p>的时候出现</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">configure:</span> <span class="string">error:</span> memcached support requires ZLIB</span><br></pre></td></tr></table></figure>
<p>却少 ZLIB 相关库，解决办法就是通过 Xcode 来安装</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-<span class="keyword">select</span> <span class="comment">--install</span></span><br></pre></td></tr></table></figure>
<p>后再次通过 brew 来安装。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Mac OS X 10.11 中通过 &lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php 中函数作为参数传递的几种形式</title>
    <link href="http://rust.love/2015/10/16/php_anonymous_function_params/"/>
    <id>http://rust.love/2015/10/16/php_anonymous_function_params/</id>
    <published>2015-10-16T00:59:07.000Z</published>
    <updated>2015-10-16T01:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>匿名函数（Anonymous functions），也叫闭包函数（closures），允许 临时创建一个没有指定名称的函数。最经常用作回调函数（callback）参数的值。当然，也有其它应用的情况。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">PHPClass</span> </span>&#123;</span></span><br><span class="line"><span class="php">    </span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">executeMethod</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">'()'</span> . PHP_EOL;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">functionParams</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="keyword">__FUNCTION__</span> . <span class="string">'()'</span> . PHP_EOL;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">functionWithFuncParams</span><span class="params">($function)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    $function();</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$anonymousFunction = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">'this is anonymous function'</span> . PHP_EOL;</span></span><br><span class="line"><span class="php">&#125;;</span></span><br><span class="line"><span class="php">$phpClass = <span class="keyword">new</span> PHPClass();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">functionWithFuncParams([$phpClass, <span class="string">'executeMethod'</span>]);</span></span><br><span class="line"><span class="php">functionWithFuncParams(<span class="string">'functionParams'</span>);</span></span><br><span class="line"><span class="php">functionWithFuncParams($anonymousFunction);</span></span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PHPClass::executeMethod()</span><br><span class="line">functionParams()</span><br><span class="line"><span class="keyword">this</span> <span class="keyword">is</span> anonymous <span class="function"><span class="keyword">function</span></span></span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;匿名函数（Anonymous functions），也叫闭包函数（closures），允许 临时创建一个没有指定名称的函数。最经常用作回调函数（callback）参数的值。当然，也有其它应用的情况。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;ta
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://rust.love/2015/10/14/hello-world/"/>
    <id>http://rust.love/2015/10/14/hello-world/</id>
    <published>2015-10-14T09:20:48.000Z</published>
    <updated>2015-10-14T09:20:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io
    
    </summary>
    
    
  </entry>
  
</feed>
